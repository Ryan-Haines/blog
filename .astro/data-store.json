[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.15.1","content-config-digest","3b2a139643557f65","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://yourdomain.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"index.js\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true,\"allowedDomains\":[]},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false,\"failOnPrerenderConflict\":false},\"legacy\":{\"collections\":false},\"session\":{\"driver\":\"cloudflare-kv-binding\",\"options\":{\"binding\":\"SESSION\"}}}","blog",["Map",11,12,134,135,230,231],"postgres-cheatsheet",{"id":11,"data":13,"body":22,"filePath":23,"digest":24,"rendered":25,"legacyId":133},{"title":14,"description":15,"pubDate":16,"tags":17},"PostgreSQL Cheat Sheet for Front-End Developers","A practical guide to PostgreSQL for developers who know React better than databases",["Date","2025-10-27T00:00:00.000Z"],[18,19,20,21],"postgres","sql","database","tutorial","> A practical guide to PostgreSQL for developers who know React better than databases\n\n## Table of Contents\n- [Data Types](#data-types)\n- [CREATE TABLE](#create-table)\n- [Primary Keys](#primary-keys)\n- [Foreign Keys](#foreign-keys)\n- [Constraints](#constraints)\n- [CRUD Operations](#crud-operations)\n- [Indexes](#indexes)\n- [ALTER TABLE](#alter-table)\n- [DROP TABLE](#drop-table)\n- [UUID Functions](#uuid-functions)\n\n---\n\n## Data Types\n\nThink of these like TypeScript types:\n\n```sql\n-- Strings\nVARCHAR(50)      -- string with max length\nTEXT             -- string (unlimited)\n\n-- Numbers\nINTEGER          -- number (whole numbers: -2147483648 to 2147483647)\nBIGINT           -- number (bigger whole numbers)\nDECIMAL(10,2)    -- number (10 digits total, 2 after decimal)\nREAL             -- number (floating point)\nSERIAL           -- number (auto-incrementing integer)\n\n-- Booleans\nBOOLEAN          -- boolean (true/false)\n\n-- Dates\nTIMESTAMP        -- Date (with time)\nDATE             -- Date (no time)\nTIME             -- Time (no date)\n\n-- JSON\nJSON             -- any (stores JSON as text)\nJSONB            -- any (stores JSON binary, faster queries)\n\n-- UUIDs\nUUID             -- string (validated UUID format)\n\n-- Arrays\nINTEGER[]        -- number[] (array of integers)\nTEXT[]           -- string[] (array of text)\n```\n\n---\n\n## CREATE TABLE\n\n### Basic Table\n```sql\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    age INTEGER,\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n```\n\n### Table with Foreign Key\n```sql\nCREATE TABLE posts (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID NOT NULL,\n    title TEXT NOT NULL,\n    content TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n### Junction Table (Many-to-Many)\n```sql\nCREATE TABLE user_roles (\n    user_id UUID,\n    role_id UUID,\n    assigned_at TIMESTAMP DEFAULT NOW(),\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(id)\n);\n```\n\n---\n\n## Primary Keys\n\n### Single Primary Key (Most Common)\n```sql\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    username VARCHAR(50)\n);\n```\n\n### Composite Primary Key (Multiple Columns)\n```sql\nCREATE TABLE user_roles (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)  -- BOTH together must be unique\n);\n```\n\n**Important:** \n- ❌ You CANNOT have multiple primary keys per table\n- ✅ You CAN have a primary key made of multiple columns (composite key)\n\n---\n\n## Foreign Keys\n\n### One-to-Many Relationship\n```sql\n-- One user has many posts\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    username VARCHAR(50)\n);\n\nCREATE TABLE posts (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID NOT NULL,\n    title TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n### Many-to-Many Relationship\n```sql\n-- Users have many roles, roles have many users\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    username VARCHAR(50)\n);\n\nCREATE TABLE roles (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    name VARCHAR(50)\n);\n\n-- Junction table\nCREATE TABLE user_roles (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(id)\n);\n```\n\n### Foreign Key with Cascade\n```sql\nCREATE TABLE posts (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID NOT NULL,\n    title TEXT,\n    -- Delete posts when user is deleted\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n```\n\n---\n\n## Constraints\n\n```sql\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    \n    -- NOT NULL: Must have a value\n    username VARCHAR(50) NOT NULL,\n    \n    -- UNIQUE: No duplicates allowed\n    email VARCHAR(100) UNIQUE NOT NULL,\n    \n    -- CHECK: Custom validation\n    age INTEGER CHECK (age >= 18),\n    price DECIMAL(10,2) CHECK (price > 0),\n    \n    -- DEFAULT: Auto-fill if not provided\n    created_at TIMESTAMP DEFAULT NOW(),\n    is_active BOOLEAN DEFAULT true,\n    status VARCHAR(20) DEFAULT 'pending'\n);\n```\n\n---\n\n## CRUD Operations\n\n### CREATE (INSERT)\n\n```sql\n-- Single insert\nINSERT INTO users (username, email) \nVALUES ('ryan', 'ryan@example.com');\n\n-- Multiple inserts\nINSERT INTO users (username, email) \nVALUES \n    ('alice', 'alice@example.com'),\n    ('bob', 'bob@example.com'),\n    ('charlie', 'charlie@example.com');\n\n-- Insert and return the created row\nINSERT INTO users (username, email) \nVALUES ('dave', 'dave@example.com')\nRETURNING *;\n\n-- Insert and return specific columns\nINSERT INTO users (username, email) \nVALUES ('eve', 'eve@example.com')\nRETURNING id, username;\n```\n\n### READ (SELECT)\n\n```sql\n-- Get all rows\nSELECT * FROM users;\n\n-- Get specific columns\nSELECT username, email FROM users;\n\n-- Filter with WHERE\nSELECT * FROM users WHERE username = 'ryan';\nSELECT * FROM users WHERE age >= 18;\nSELECT * FROM users WHERE is_active = true;\n\n-- Multiple conditions (AND)\nSELECT * FROM users \nWHERE age >= 18 AND is_active = true;\n\n-- Multiple conditions (OR)\nSELECT * FROM users \nWHERE username = 'ryan' OR username = 'alice';\n\n-- IN clause (like array.includes())\nSELECT * FROM users \nWHERE username IN ('ryan', 'alice', 'bob');\n\n-- Pattern matching (LIKE)\nSELECT * FROM users WHERE email LIKE '%@gmail.com';\nSELECT * FROM users WHERE username LIKE 'r%';  -- Starts with 'r'\nSELECT * FROM users WHERE username LIKE '%an%'; -- Contains 'an'\n\n-- NOT\nSELECT * FROM users WHERE NOT is_active;\nSELECT * FROM users WHERE email NOT LIKE '%@gmail.com';\n\n-- NULL checks\nSELECT * FROM users WHERE phone IS NULL;\nSELECT * FROM users WHERE phone IS NOT NULL;\n\n-- Order by\nSELECT * FROM users ORDER BY created_at DESC;\nSELECT * FROM users ORDER BY username ASC;\nSELECT * FROM users ORDER BY age DESC, username ASC;\n\n-- Limit and offset (pagination)\nSELECT * FROM users LIMIT 10;\nSELECT * FROM users LIMIT 10 OFFSET 20;  -- Skip 20, get next 10\n\n-- Count\nSELECT COUNT(*) FROM users;\nSELECT COUNT(*) FROM users WHERE is_active = true;\n\n-- Distinct\nSELECT DISTINCT email FROM users;\n```\n\n### UPDATE\n\n```sql\n-- Update one field\nUPDATE users \nSET email = 'newemail@example.com' \nWHERE username = 'ryan';\n\n-- Update multiple fields\nUPDATE users \nSET email = 'new@example.com', is_active = false \nWHERE id = 'some-uuid-here';\n\n-- Update with calculation\nUPDATE users \nSET age = age + 1 \nWHERE username = 'ryan';\n\n-- Update all rows (BE CAREFUL!)\nUPDATE users SET is_active = true;\n\n-- Update and return modified rows\nUPDATE users \nSET email = 'new@example.com' \nWHERE username = 'ryan'\nRETURNING *;\n```\n\n### DELETE\n\n```sql\n-- Delete specific row\nDELETE FROM users WHERE username = 'ryan';\n\n-- Delete with condition\nDELETE FROM users WHERE created_at \u003C '2020-01-01';\nDELETE FROM users WHERE is_active = false;\n\n-- Delete all rows (BE VERY CAREFUL!)\nDELETE FROM users;\n\n-- Delete and return what was deleted\nDELETE FROM users \nWHERE username = 'ryan'\nRETURNING *;\n```\n\n---\n\n## Indexes\n\nIndexes make queries faster (like database performance optimization):\n\n```sql\n-- Create index on frequently queried column\nCREATE INDEX idx_users_email ON users(email);\n\n-- Unique index (enforces uniqueness like UNIQUE constraint)\nCREATE UNIQUE INDEX idx_users_username ON users(username);\n\n-- Composite index (multiple columns)\nCREATE INDEX idx_posts_user_created ON posts(user_id, created_at);\n\n-- Drop index\nDROP INDEX idx_users_email;\n\n-- Check if index exists\nDROP INDEX IF EXISTS idx_users_email;\n```\n\n**When to use indexes:**\n- ✅ Columns used in WHERE clauses frequently\n- ✅ Foreign key columns\n- ✅ Columns used in ORDER BY\n- ✅ Columns used in JOIN conditions\n- ❌ Small tables (overhead not worth it)\n- ❌ Columns that change frequently (slows down writes)\n\n---\n\n## ALTER TABLE\n\nModifying existing tables:\n\n```sql\n-- Add column\nALTER TABLE users ADD COLUMN phone VARCHAR(20);\nALTER TABLE users ADD COLUMN bio TEXT DEFAULT '';\n\n-- Drop column\nALTER TABLE users DROP COLUMN phone;\n\n-- Rename column\nALTER TABLE users RENAME COLUMN username TO user_name;\n\n-- Rename table\nALTER TABLE users RENAME TO app_users;\n\n-- Change column type\nALTER TABLE users ALTER COLUMN age TYPE BIGINT;\n\n-- Set default value\nALTER TABLE users ALTER COLUMN is_active SET DEFAULT true;\n\n-- Remove default value\nALTER TABLE users ALTER COLUMN is_active DROP DEFAULT;\n\n-- Add NOT NULL constraint\nALTER TABLE users ALTER COLUMN email SET NOT NULL;\n\n-- Remove NOT NULL constraint\nALTER TABLE users ALTER COLUMN email DROP NOT NULL;\n\n-- Add constraint\nALTER TABLE users ADD CONSTRAINT check_age CHECK (age >= 18);\nALTER TABLE users ADD CONSTRAINT unique_email UNIQUE (email);\n\n-- Drop constraint\nALTER TABLE users DROP CONSTRAINT check_age;\n```\n\n---\n\n## DROP TABLE\n\nDeleting tables:\n\n```sql\n-- Delete table and all data\nDROP TABLE users;\n\n-- Delete if exists (no error if doesn't exist)\nDROP TABLE IF EXISTS users;\n\n-- Delete with cascade (also delete dependent tables/constraints)\nDROP TABLE users CASCADE;\n```\n\n---\n\n## UUID Functions\n\n### Modern Way (PostgreSQL 13+)\n\n```sql\n-- Generate random UUID (v4)\nSELECT gen_random_uuid();\n-- Output: 550e8400-e29b-41d4-a716-446655440000\n\n-- Use in table\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    username VARCHAR(50)\n);\n```\n\n### Legacy Way (Requires Extension)\n\n```sql\n-- Enable extension (only needed once per database)\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n-- Generate UUIDs\nSELECT uuid_generate_v1();  -- Time-based (contains MAC address)\nSELECT uuid_generate_v4();  -- Random (same as gen_random_uuid)\n```\n\n### UUID Versions Explained\n\n**v1 (Time-based):**\n- Contains timestamp + MAC address\n- ✅ Sortable by time\n- ❌ Privacy leak (MAC address visible)\n\n**v4 (Random):**\n- Pure random\n- ✅ Secure and unpredictable\n- ✅ No privacy leaks\n- ❌ Not sortable\n\n**Recommendation:** Use `gen_random_uuid()` (v4) for modern apps!\n\n---\n\n## Frontend Dev Mental Model\n\nThink of databases like normalized Redux state:\n\n```javascript\n// Frontend (Redux)\nconst state = {\n  users: {\n    byId: {\n      '123': { id: '123', username: 'ryan', email: 'ryan@example.com' }\n    },\n    allIds: ['123']\n  },\n  posts: {\n    byId: {\n      '456': { id: '456', userId: '123', title: 'Hello World' }\n    },\n    allIds: ['456']\n  }\n};\n\n// Backend (PostgreSQL)\nCREATE TABLE users (\n    id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\nCREATE TABLE posts (\n    id UUID PRIMARY KEY,\n    user_id UUID,\n    title TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n**Tables = State slices**  \n**Foreign keys = References between slices**  \n**Indexes = Performance optimization**\n\n---\n\n## Quick Reference\n\n### Connection Info\n- **Host:** `localhost`\n- **Port:** `5432`\n- **Database:** `postgres`\n- **Username:** Your macOS username\n- **Password:** (leave blank for local development)\n\n### Common Commands\n```bash\n# Start PostgreSQL\nbrew services start postgresql@16\n\n# Stop PostgreSQL\nbrew services stop postgresql@16\n\n# Connect to database\npsql -d postgres\n\n# Check version\npsql --version\n\n# Run SQL from command line\npsql -d postgres -c \"SELECT * FROM users;\"\n```\n\n### psql Commands (Inside psql shell)\n```sql\n\\l              -- List all databases\n\\c dbname       -- Connect to database\n\\dt             -- List all tables\n\\d tablename    -- Describe table structure\n\\du             -- List all users\n\\q              -- Quit psql\n```\n\n---\n\n## Best Practices\n\n1. **Always use UUIDs for primary keys** (unless you have a good reason not to)\n2. **Add indexes on foreign keys** (makes joins faster)\n3. **Use NOT NULL for required fields** (catch errors early)\n4. **Use UNIQUE for fields that should be unique** (like email, username)\n5. **Use CHECK constraints for validation** (enforce business rules at DB level)\n6. **Use TIMESTAMP for dates** (always include timezone info)\n7. **Use JSONB over JSON** (faster queries, better indexing)\n8. **Use CASCADE carefully** (can accidentally delete lots of data)\n9. **Test queries before running in production** (especially DELETE and UPDATE)\n10. **Back up your data regularly** (because shit happens)\n\n*Made with ❤️ for frontend devs learning backend stuffs*","src/content/blog/postgres-cheatsheet.md","80a1561f7d11f338",{"html":26,"metadata":27},"\u003Cblockquote>\n\u003Cp>A practical guide to PostgreSQL for developers who know React better than databases\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"table-of-contents\">Table of Contents\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#data-types\">Data Types\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#create-table\">CREATE TABLE\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#primary-keys\">Primary Keys\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#foreign-keys\">Foreign Keys\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#constraints\">Constraints\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#crud-operations\">CRUD Operations\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#indexes\">Indexes\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#alter-table\">ALTER TABLE\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#drop-table\">DROP TABLE\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#uuid-functions\">UUID Functions\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"data-types\">Data Types\u003C/h2>\n\u003Cp>Think of these like TypeScript types:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Strings\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)      \u003C/span>\u003Cspan style=\"color:#6A737D\">-- string with max length\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">TEXT\u003C/span>\u003Cspan style=\"color:#6A737D\">             -- string (unlimited)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Numbers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">INTEGER\u003C/span>\u003Cspan style=\"color:#6A737D\">          -- number (whole numbers: -2147483648 to 2147483647)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">BIGINT\u003C/span>\u003Cspan style=\"color:#6A737D\">           -- number (bigger whole numbers)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">DECIMAL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)    \u003C/span>\u003Cspan style=\"color:#6A737D\">-- number (10 digits total, 2 after decimal)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">REAL\u003C/span>\u003Cspan style=\"color:#6A737D\">             -- number (floating point)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SERIAL\u003C/span>\u003Cspan style=\"color:#6A737D\">           -- number (auto-incrementing integer)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Booleans\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">BOOLEAN\u003C/span>\u003Cspan style=\"color:#6A737D\">          -- boolean (true/false)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Dates\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">TIMESTAMP\u003C/span>\u003Cspan style=\"color:#6A737D\">        -- Date (with time)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">DATE\u003C/span>\u003Cspan style=\"color:#6A737D\">             -- Date (no time)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">TIME\u003C/span>\u003Cspan style=\"color:#6A737D\">             -- Time (no date)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- JSON\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">JSON\u003C/span>\u003Cspan style=\"color:#6A737D\">             -- any (stores JSON as text)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">JSONB            \u003C/span>\u003Cspan style=\"color:#6A737D\">-- any (stores JSON binary, faster queries)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- UUIDs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">UUID             \u003C/span>\u003Cspan style=\"color:#6A737D\">-- string (validated UUID format)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Arrays\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">INTEGER\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]        \u003C/span>\u003Cspan style=\"color:#6A737D\">-- number[] (array of integers)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">TEXT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]           \u003C/span>\u003Cspan style=\"color:#6A737D\">-- string[] (array of text)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"create-table\">CREATE TABLE\u003C/h2>\n\u003Ch3 id=\"basic-table\">Basic Table\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> users\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gen_random_uuid(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    username \u003C/span>\u003Cspan style=\"color:#F97583\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">UNIQUE\u003C/span>\u003Cspan style=\"color:#F97583\"> NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    email \u003C/span>\u003Cspan style=\"color:#F97583\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">UNIQUE\u003C/span>\u003Cspan style=\"color:#F97583\"> NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    age \u003C/span>\u003Cspan style=\"color:#F97583\">INTEGER\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    is_active \u003C/span>\u003Cspan style=\"color:#F97583\">BOOLEAN\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> true,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    created_at \u003C/span>\u003Cspan style=\"color:#F97583\">TIMESTAMP\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#F97583\"> NOW\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"table-with-foreign-key\">Table with Foreign Key\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> posts\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gen_random_uuid(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    user_id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    title \u003C/span>\u003Cspan style=\"color:#F97583\">TEXT\u003C/span>\u003Cspan style=\"color:#F97583\"> NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    content \u003C/span>\u003Cspan style=\"color:#F97583\">TEXT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    created_at \u003C/span>\u003Cspan style=\"color:#F97583\">TIMESTAMP\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#F97583\"> NOW\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    FOREIGN KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (user_id) \u003C/span>\u003Cspan style=\"color:#F97583\">REFERENCES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users(id)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"junction-table-many-to-many\">Junction Table (Many-to-Many)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> user_roles\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    user_id UUID,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    role_id UUID,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    assigned_at \u003C/span>\u003Cspan style=\"color:#F97583\">TIMESTAMP\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#F97583\"> NOW\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (user_id, role_id),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    FOREIGN KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (user_id) \u003C/span>\u003Cspan style=\"color:#F97583\">REFERENCES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users(id),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    FOREIGN KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (role_id) \u003C/span>\u003Cspan style=\"color:#F97583\">REFERENCES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> roles(id)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"primary-keys\">Primary Keys\u003C/h2>\n\u003Ch3 id=\"single-primary-key-most-common\">Single Primary Key (Most Common)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> users\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gen_random_uuid(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    username \u003C/span>\u003Cspan style=\"color:#F97583\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"composite-primary-key-multiple-columns\">Composite Primary Key (Multiple Columns)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> user_roles\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    user_id UUID,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    role_id UUID,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (user_id, role_id)  \u003C/span>\u003Cspan style=\"color:#6A737D\">-- BOTH together must be unique\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Important:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>❌ You CANNOT have multiple primary keys per table\u003C/li>\n\u003Cli>✅ You CAN have a primary key made of multiple columns (composite key)\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"foreign-keys\">Foreign Keys\u003C/h2>\n\u003Ch3 id=\"one-to-many-relationship\">One-to-Many Relationship\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- One user has many posts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> users\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gen_random_uuid(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    username \u003C/span>\u003Cspan style=\"color:#F97583\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> posts\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gen_random_uuid(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    user_id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    title \u003C/span>\u003Cspan style=\"color:#F97583\">TEXT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    FOREIGN KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (user_id) \u003C/span>\u003Cspan style=\"color:#F97583\">REFERENCES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users(id)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"many-to-many-relationship\">Many-to-Many Relationship\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Users have many roles, roles have many users\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> users\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gen_random_uuid(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    username \u003C/span>\u003Cspan style=\"color:#F97583\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> roles\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gen_random_uuid(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    name\u003C/span>\u003Cspan style=\"color:#F97583\"> VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Junction table\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> user_roles\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    user_id UUID,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    role_id UUID,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (user_id, role_id),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    FOREIGN KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (user_id) \u003C/span>\u003Cspan style=\"color:#F97583\">REFERENCES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users(id),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    FOREIGN KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (role_id) \u003C/span>\u003Cspan style=\"color:#F97583\">REFERENCES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> roles(id)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"foreign-key-with-cascade\">Foreign Key with Cascade\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> posts\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gen_random_uuid(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    user_id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    title \u003C/span>\u003Cspan style=\"color:#F97583\">TEXT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    -- Delete posts when user is deleted\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    FOREIGN KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (user_id) \u003C/span>\u003Cspan style=\"color:#F97583\">REFERENCES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users(id) \u003C/span>\u003Cspan style=\"color:#F97583\">ON DELETE CASCADE\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"constraints\">Constraints\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> users\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gen_random_uuid(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    -- NOT NULL: Must have a value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    username \u003C/span>\u003Cspan style=\"color:#F97583\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    -- UNIQUE: No duplicates allowed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    email \u003C/span>\u003Cspan style=\"color:#F97583\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">UNIQUE\u003C/span>\u003Cspan style=\"color:#F97583\"> NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    -- CHECK: Custom validation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    age \u003C/span>\u003Cspan style=\"color:#F97583\">INTEGER\u003C/span>\u003Cspan style=\"color:#F97583\"> CHECK\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (age \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 18\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    price \u003C/span>\u003Cspan style=\"color:#F97583\">DECIMAL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">CHECK\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (price \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    -- DEFAULT: Auto-fill if not provided\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    created_at \u003C/span>\u003Cspan style=\"color:#F97583\">TIMESTAMP\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#F97583\"> NOW\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    is_active \u003C/span>\u003Cspan style=\"color:#F97583\">BOOLEAN\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> true,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    status\u003C/span>\u003Cspan style=\"color:#F97583\"> VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">DEFAULT\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'pending'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"crud-operations\">CRUD Operations\u003C/h2>\n\u003Ch3 id=\"create-insert\">CREATE (INSERT)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Single insert\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">INSERT INTO\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users (username, email) \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">VALUES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'ryan'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'ryan@example.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Multiple inserts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">INSERT INTO\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users (username, email) \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">VALUES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'alice'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'alice@example.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'bob'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'bob@example.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'charlie'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'charlie@example.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Insert and return the created row\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">INSERT INTO\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users (username, email) \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">VALUES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'dave'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'dave@example.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">RETURNING \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Insert and return specific columns\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">INSERT INTO\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users (username, email) \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">VALUES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'eve'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'eve@example.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">RETURNING id, username;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"read-select\">READ (SELECT)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Get all rows\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Get specific columns\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username, email \u003C/span>\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Filter with WHERE\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'ryan'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> age \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 18\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> is_active \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> true;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Multiple conditions (AND)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> age \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 18\u003C/span>\u003Cspan style=\"color:#F97583\"> AND\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> is_active \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> true;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Multiple conditions (OR)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'ryan'\u003C/span>\u003Cspan style=\"color:#F97583\"> OR\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'alice'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- IN clause (like array.includes())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username \u003C/span>\u003Cspan style=\"color:#F97583\">IN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'ryan'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'alice'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'bob'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Pattern matching (LIKE)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> email \u003C/span>\u003Cspan style=\"color:#F97583\">LIKE\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '%@gmail.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username \u003C/span>\u003Cspan style=\"color:#F97583\">LIKE\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'r%'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;  \u003C/span>\u003Cspan style=\"color:#6A737D\">-- Starts with 'r'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username \u003C/span>\u003Cspan style=\"color:#F97583\">LIKE\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '%an%'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">-- Contains 'an'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- NOT\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#F97583\"> NOT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> is_active;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> email \u003C/span>\u003Cspan style=\"color:#F97583\">NOT\u003C/span>\u003Cspan style=\"color:#F97583\"> LIKE\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '%@gmail.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- NULL checks\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> phone \u003C/span>\u003Cspan style=\"color:#F97583\">IS\u003C/span>\u003Cspan style=\"color:#F97583\"> NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> phone \u003C/span>\u003Cspan style=\"color:#F97583\">IS NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Order by\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">ORDER BY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> created_at \u003C/span>\u003Cspan style=\"color:#F97583\">DESC\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">ORDER BY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username \u003C/span>\u003Cspan style=\"color:#F97583\">ASC\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">ORDER BY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> age \u003C/span>\u003Cspan style=\"color:#F97583\">DESC\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, username \u003C/span>\u003Cspan style=\"color:#F97583\">ASC\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Limit and offset (pagination)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">LIMIT\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">LIMIT\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 10\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> OFFSET \u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;  \u003C/span>\u003Cspan style=\"color:#6A737D\">-- Skip 20, get next 10\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Count\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#79B8FF\"> COUNT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#79B8FF\"> COUNT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> is_active \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> true;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Distinct\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT DISTINCT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> email \u003C/span>\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"update\">UPDATE\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Update one field\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">UPDATE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SET\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> email \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'newemail@example.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'ryan'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Update multiple fields\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">UPDATE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SET\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> email \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'new@example.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, is_active \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> false \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> id \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'some-uuid-here'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Update with calculation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">UPDATE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SET\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> age \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> age \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'ryan'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Update all rows (BE CAREFUL!)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">UPDATE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">SET\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> is_active \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> true;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Update and return modified rows\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">UPDATE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SET\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> email \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'new@example.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'ryan'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">RETURNING \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"delete\">DELETE\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Delete specific row\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">DELETE\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'ryan'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Delete with condition\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">DELETE\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> created_at \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '2020-01-01'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">DELETE\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> is_active \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> false;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Delete all rows (BE VERY CAREFUL!)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">DELETE\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Delete and return what was deleted\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">DELETE\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> username \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'ryan'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">RETURNING \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"indexes\">Indexes\u003C/h2>\n\u003Cp>Indexes make queries faster (like database performance optimization):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Create index on frequently queried column\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> INDEX\u003C/span>\u003Cspan style=\"color:#B392F0\"> idx_users_email\u003C/span>\u003Cspan style=\"color:#F97583\"> ON\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users(email);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Unique index (enforces uniqueness like UNIQUE constraint)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> UNIQUE INDEX\u003C/span>\u003Cspan style=\"color:#B392F0\"> idx_users_username\u003C/span>\u003Cspan style=\"color:#F97583\"> ON\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users(username);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Composite index (multiple columns)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> INDEX\u003C/span>\u003Cspan style=\"color:#B392F0\"> idx_posts_user_created\u003C/span>\u003Cspan style=\"color:#F97583\"> ON\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> posts(user_id, created_at);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Drop index\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">DROP\u003C/span>\u003Cspan style=\"color:#F97583\"> INDEX\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> idx_users_email;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Check if index exists\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">DROP\u003C/span>\u003Cspan style=\"color:#F97583\"> INDEX\u003C/span>\u003Cspan style=\"color:#F97583\"> IF\u003C/span>\u003Cspan style=\"color:#F97583\"> EXISTS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> idx_users_email;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>When to use indexes:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>✅ Columns used in WHERE clauses frequently\u003C/li>\n\u003Cli>✅ Foreign key columns\u003C/li>\n\u003Cli>✅ Columns used in ORDER BY\u003C/li>\n\u003Cli>✅ Columns used in JOIN conditions\u003C/li>\n\u003Cli>❌ Small tables (overhead not worth it)\u003C/li>\n\u003Cli>❌ Columns that change frequently (slows down writes)\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"alter-table\">ALTER TABLE\u003C/h2>\n\u003Cp>Modifying existing tables:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Add column\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">ADD\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> COLUMN phone \u003C/span>\u003Cspan style=\"color:#F97583\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">ADD\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> COLUMN bio \u003C/span>\u003Cspan style=\"color:#F97583\">TEXT\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Drop column\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">DROP\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> COLUMN phone;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Rename column\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users RENAME COLUMN username \u003C/span>\u003Cspan style=\"color:#F97583\">TO\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> user_name;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Rename table\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users RENAME \u003C/span>\u003Cspan style=\"color:#F97583\">TO\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> app_users;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Change column type\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> COLUMN age \u003C/span>\u003Cspan style=\"color:#F97583\">TYPE\u003C/span>\u003Cspan style=\"color:#F97583\"> BIGINT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Set default value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> COLUMN is_active \u003C/span>\u003Cspan style=\"color:#F97583\">SET\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> true;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Remove default value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> COLUMN is_active \u003C/span>\u003Cspan style=\"color:#F97583\">DROP\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Add NOT NULL constraint\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> COLUMN email \u003C/span>\u003Cspan style=\"color:#F97583\">SET\u003C/span>\u003Cspan style=\"color:#F97583\"> NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Remove NOT NULL constraint\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> COLUMN email \u003C/span>\u003Cspan style=\"color:#F97583\">DROP\u003C/span>\u003Cspan style=\"color:#F97583\"> NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Add constraint\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">ADD\u003C/span>\u003Cspan style=\"color:#F97583\"> CONSTRAINT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> check_age \u003C/span>\u003Cspan style=\"color:#F97583\">CHECK\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (age \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 18\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">ADD\u003C/span>\u003Cspan style=\"color:#F97583\"> CONSTRAINT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> unique_email \u003C/span>\u003Cspan style=\"color:#F97583\">UNIQUE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (email);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Drop constraint\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">DROP\u003C/span>\u003Cspan style=\"color:#F97583\"> CONSTRAINT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> check_age;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"drop-table\">DROP TABLE\u003C/h2>\n\u003Cp>Deleting tables:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Delete table and all data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">DROP\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Delete if exists (no error if doesn't exist)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">DROP\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#F97583\"> IF\u003C/span>\u003Cspan style=\"color:#F97583\"> EXISTS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Delete with cascade (also delete dependent tables/constraints)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">DROP\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users CASCADE;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"uuid-functions\">UUID Functions\u003C/h2>\n\u003Ch3 id=\"modern-way-postgresql-13\">Modern Way (PostgreSQL 13+)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Generate random UUID (v4)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gen_random_uuid();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Output: 550e8400-e29b-41d4-a716-446655440000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Use in table\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> users\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id UUID \u003C/span>\u003Cspan style=\"color:#F97583\">PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gen_random_uuid(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    username \u003C/span>\u003Cspan style=\"color:#F97583\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"legacy-way-requires-extension\">Legacy Way (Requires Extension)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Enable extension (only needed once per database)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> EXTENSION \u003C/span>\u003Cspan style=\"color:#F97583\">IF\u003C/span>\u003Cspan style=\"color:#F97583\"> NOT\u003C/span>\u003Cspan style=\"color:#F97583\"> EXISTS\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"uuid-ossp\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Generate UUIDs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> uuid_generate_v1();  \u003C/span>\u003Cspan style=\"color:#6A737D\">-- Time-based (contains MAC address)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> uuid_generate_v4();  \u003C/span>\u003Cspan style=\"color:#6A737D\">-- Random (same as gen_random_uuid)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"uuid-versions-explained\">UUID Versions Explained\u003C/h3>\n\u003Cp>\u003Cstrong>v1 (Time-based):\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Contains timestamp + MAC address\u003C/li>\n\u003Cli>✅ Sortable by time\u003C/li>\n\u003Cli>❌ Privacy leak (MAC address visible)\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>v4 (Random):\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Pure random\u003C/li>\n\u003Cli>✅ Secure and unpredictable\u003C/li>\n\u003Cli>✅ No privacy leaks\u003C/li>\n\u003Cli>❌ Not sortable\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Recommendation:\u003C/strong> Use \u003Ccode>gen_random_uuid()\u003C/code> (v4) for modern apps!\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"frontend-dev-mental-model\">Frontend Dev Mental Model\u003C/h2>\n\u003Cp>Think of databases like normalized Redux state:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Frontend (Redux)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> state\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  users: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    byId: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      '123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { id: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, username: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'ryan'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, email: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'ryan@example.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    allIds: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  posts: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    byId: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      '456'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { id: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'456'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, userId: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, title: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hello World'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    allIds: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'456'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Backend (PostgreSQL)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">CREATE\u003C/span>\u003Cspan style=\"color:#79B8FF\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> users\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id \u003C/span>\u003Cspan style=\"color:#79B8FF\">UUID\u003C/span>\u003Cspan style=\"color:#79B8FF\"> PRIMARY\u003C/span>\u003Cspan style=\"color:#79B8FF\"> KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    username \u003C/span>\u003Cspan style=\"color:#B392F0\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    email \u003C/span>\u003Cspan style=\"color:#B392F0\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">CREATE\u003C/span>\u003Cspan style=\"color:#79B8FF\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> posts\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id \u003C/span>\u003Cspan style=\"color:#79B8FF\">UUID\u003C/span>\u003Cspan style=\"color:#79B8FF\"> PRIMARY\u003C/span>\u003Cspan style=\"color:#79B8FF\"> KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    user_id \u003C/span>\u003Cspan style=\"color:#79B8FF\">UUID\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    title \u003C/span>\u003Cspan style=\"color:#79B8FF\">TEXT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    FOREIGN\u003C/span>\u003Cspan style=\"color:#B392F0\"> KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (user_id) \u003C/span>\u003Cspan style=\"color:#79B8FF\">REFERENCES\u003C/span>\u003Cspan style=\"color:#B392F0\"> users\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(id)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Tables = State slices\u003C/strong>\u003Cbr>\n\u003Cstrong>Foreign keys = References between slices\u003C/strong>\u003Cbr>\n\u003Cstrong>Indexes = Performance optimization\u003C/strong>\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"quick-reference\">Quick Reference\u003C/h2>\n\u003Ch3 id=\"connection-info\">Connection Info\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Host:\u003C/strong> \u003Ccode>localhost\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Port:\u003C/strong> \u003Ccode>5432\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Database:\u003C/strong> \u003Ccode>postgres\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Username:\u003C/strong> Your macOS username\u003C/li>\n\u003Cli>\u003Cstrong>Password:\u003C/strong> (leave blank for local development)\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"common-commands\">Common Commands\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Start PostgreSQL\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">brew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> services\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> start\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> postgresql@16\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Stop PostgreSQL\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">brew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> services\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> stop\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> postgresql@16\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Connect to database\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">psql\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -d\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> postgres\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Check version\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">psql\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --version\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run SQL from command line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">psql\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -d\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> postgres\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -c\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"SELECT * FROM users;\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"psql-commands-inside-psql-shell\">psql Commands (Inside psql shell)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\l              \u003C/span>\u003Cspan style=\"color:#6A737D\">-- List all databases\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\c dbname       \u003C/span>\u003Cspan style=\"color:#6A737D\">-- Connect to database\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\dt             \u003C/span>\u003Cspan style=\"color:#6A737D\">-- List all tables\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\d tablename    \u003C/span>\u003Cspan style=\"color:#6A737D\">-- Describe table structure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\du             \u003C/span>\u003Cspan style=\"color:#6A737D\">-- List all users\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\q              \u003C/span>\u003Cspan style=\"color:#6A737D\">-- Quit psql\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"best-practices\">Best Practices\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Always use UUIDs for primary keys\u003C/strong> (unless you have a good reason not to)\u003C/li>\n\u003Cli>\u003Cstrong>Add indexes on foreign keys\u003C/strong> (makes joins faster)\u003C/li>\n\u003Cli>\u003Cstrong>Use NOT NULL for required fields\u003C/strong> (catch errors early)\u003C/li>\n\u003Cli>\u003Cstrong>Use UNIQUE for fields that should be unique\u003C/strong> (like email, username)\u003C/li>\n\u003Cli>\u003Cstrong>Use CHECK constraints for validation\u003C/strong> (enforce business rules at DB level)\u003C/li>\n\u003Cli>\u003Cstrong>Use TIMESTAMP for dates\u003C/strong> (always include timezone info)\u003C/li>\n\u003Cli>\u003Cstrong>Use JSONB over JSON\u003C/strong> (faster queries, better indexing)\u003C/li>\n\u003Cli>\u003Cstrong>Use CASCADE carefully\u003C/strong> (can accidentally delete lots of data)\u003C/li>\n\u003Cli>\u003Cstrong>Test queries before running in production\u003C/strong> (especially DELETE and UPDATE)\u003C/li>\n\u003Cli>\u003Cstrong>Back up your data regularly\u003C/strong> (because shit happens)\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cem>Made with ❤️ for frontend devs learning backend stuffs\u003C/em>\u003C/p>",{"headings":28,"localImagePaths":127,"remoteImagePaths":128,"frontmatter":129,"imagePaths":132},[29,33,36,39,43,46,49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124],{"depth":30,"slug":31,"text":32},2,"table-of-contents","Table of Contents",{"depth":30,"slug":34,"text":35},"data-types","Data Types",{"depth":30,"slug":37,"text":38},"create-table","CREATE TABLE",{"depth":40,"slug":41,"text":42},3,"basic-table","Basic Table",{"depth":40,"slug":44,"text":45},"table-with-foreign-key","Table with Foreign Key",{"depth":40,"slug":47,"text":48},"junction-table-many-to-many","Junction Table (Many-to-Many)",{"depth":30,"slug":50,"text":51},"primary-keys","Primary Keys",{"depth":40,"slug":53,"text":54},"single-primary-key-most-common","Single Primary Key (Most Common)",{"depth":40,"slug":56,"text":57},"composite-primary-key-multiple-columns","Composite Primary Key (Multiple Columns)",{"depth":30,"slug":59,"text":60},"foreign-keys","Foreign Keys",{"depth":40,"slug":62,"text":63},"one-to-many-relationship","One-to-Many Relationship",{"depth":40,"slug":65,"text":66},"many-to-many-relationship","Many-to-Many Relationship",{"depth":40,"slug":68,"text":69},"foreign-key-with-cascade","Foreign Key with Cascade",{"depth":30,"slug":71,"text":72},"constraints","Constraints",{"depth":30,"slug":74,"text":75},"crud-operations","CRUD Operations",{"depth":40,"slug":77,"text":78},"create-insert","CREATE (INSERT)",{"depth":40,"slug":80,"text":81},"read-select","READ (SELECT)",{"depth":40,"slug":83,"text":84},"update","UPDATE",{"depth":40,"slug":86,"text":87},"delete","DELETE",{"depth":30,"slug":89,"text":90},"indexes","Indexes",{"depth":30,"slug":92,"text":93},"alter-table","ALTER TABLE",{"depth":30,"slug":95,"text":96},"drop-table","DROP TABLE",{"depth":30,"slug":98,"text":99},"uuid-functions","UUID Functions",{"depth":40,"slug":101,"text":102},"modern-way-postgresql-13","Modern Way (PostgreSQL 13+)",{"depth":40,"slug":104,"text":105},"legacy-way-requires-extension","Legacy Way (Requires Extension)",{"depth":40,"slug":107,"text":108},"uuid-versions-explained","UUID Versions Explained",{"depth":30,"slug":110,"text":111},"frontend-dev-mental-model","Frontend Dev Mental Model",{"depth":30,"slug":113,"text":114},"quick-reference","Quick Reference",{"depth":40,"slug":116,"text":117},"connection-info","Connection Info",{"depth":40,"slug":119,"text":120},"common-commands","Common Commands",{"depth":40,"slug":122,"text":123},"psql-commands-inside-psql-shell","psql Commands (Inside psql shell)",{"depth":30,"slug":125,"text":126},"best-practices","Best Practices",[],[],{"title":14,"description":15,"pubDate":130,"tags":131},["Date","2025-10-27T00:00:00.000Z"],[18,19,20,21],[],"postgres-cheatsheet.md","building-a-zero-cost-blog",{"id":134,"data":136,"body":144,"filePath":145,"digest":146,"rendered":147,"legacyId":229},{"title":137,"description":138,"pubDate":139,"tags":140},"Building a $0/Month Blog That I Actually Own","How I finally put my domain to work using Cloudflare's free tier, Astro, and party parrots",["Date","2025-10-28T00:00:00.000Z"],[141,142,143,21],"webdev","astro","cloudflare","> How I finally put my domain to work using Cloudflare's free tier, Astro, and party parrots\n\n## The Domain That Did Nothing\n\nI've owned `ryanhaines.com` for years. And what did I do with it? Absolutely nothing productive. It just redirected to my LinkedIn profile like some kind of digital business card that cost me $12/year to maintain.\n\nWhy? Because I'm **frugal**. I wasn't about to drop $5-20/month on hosting when all I wanted was a simple blog to share technical posts. That's $60-240/year to host some markdown files and a contact form.\n\nBut then Cloudflare happened. Free tier. D1 database. Pages hosting. All free. Not \"free trial\" or \"free credits for 3 months\" - actually free. So naturally, I had to build something.\n\n## The Requirements\n\nI had a few non-negotiables:\n\n1. **Write in Markdown** - I'm a developer, not a WordPress admin\n2. **Comments and likes** - Static sites are cool, but I wanted interaction\n3. **Full ownership** - If Cloudflare [enshittifies](https://en.wikipedia.org/wiki/Enshittification), I can export and leave\n4. **Zero cost** - The whole point, really\n5. **No vendor lock-in** - SQLite dumps are portable. Vendor-specific APIs are not.\n\n## Why Not Use [Insert Popular Service Here]?\n\nYou're probably thinking: \"Why not just use Disqus? Or Giscus? Or Utterances?\"\n\nGreat question! Here's why I said no:\n\n- **Disqus** - Ads, tracking, owned by a ad-tech company. Hard pass.\n- **Giscus/Utterances** - Requires readers to have GitHub accounts. My mom doesn't have a GitHub account.\n- **Commento/Hyvor** - Costs money after free tier. See \"frugal\" above.\n- **Facebook Comments** - lol no\n\nI wanted something simple: name + comment. No login, no tracking, no third-party dependencies that could vanish overnight. A form, a database, and spam protection - that's all it takes.\n\n## The Stack\n\nAfter some research (and by research, I mean asking Claude what would work), I landed on:\n\n- **[Astro](https://astro.build/)** - Fast, markdown-friendly, modern\n- **[Cloudflare Pages](https://pages.cloudflare.com/)** - Free hosting with global CDN\n- **[Cloudflare D1](https://developers.cloudflare.com/d1/)** - Free SQLite database (5M reads/day on free tier!)\n- **[Turnstile](https://www.cloudflare.com/products/turnstile/)** - Free CAPTCHA that doesn't make users play \"find the crosswalk\"\n- **[Tailwind CSS](https://tailwindcss.com/)** - Because hand-writing CSS in 2025 is for masochists\n\nEverything here is either standard web tech (Astro, Tailwind) or built on SQLite (D1), which means the data is portable and the code isn't locked to any single platform.\n\n## Building It (The Fun Parts)\n\n### 1. Theme Setup\n\nFirst things first: I'm not a designer. So I found the beautiful [Dante Astro Theme](https://github.com/JustGoodUI/dante-astro-theme) and made it my own.\n\n**Important lesson:** If you add dark mode, handle the flash of unstyled content! Nothing says \"amateur hour\" like your site flickering between light and dark on every page load. Astro makes this easy with inline theme scripts that run before the page renders.\n\n```astro\n\u003Cscript is:inline>\n  // This runs BEFORE page renders\n  const theme = localStorage.getItem('theme') || 'light';\n  document.documentElement.classList.add(theme);\n\u003C/script>\n```\n\n### 2. The Commenting System\n\nThis was the meaty part. I built a custom system with:\n\n- **Sidebar panel** - Comments slide in from the right (Medium-style)\n- **No email collection** - I'm not a marketing agency\n- **Rate limiting** - 2 comments per 5 minutes per IP\n- **Turnstile CAPTCHA** - Stops the bots\n- **Spam detection** - Pattern matching for common spam phrases\n\nThe database schema is dead simple:\n\n```sql\nCREATE TABLE comments (\n  id INTEGER PRIMARY KEY,\n  post_slug TEXT NOT NULL,\n  author_name TEXT NOT NULL,\n  content TEXT NOT NULL,\n  created_at INTEGER NOT NULL,\n  ip_address TEXT,\n  approved INTEGER DEFAULT 1\n);\n```\n\nStandard SQLite with no foreign keys to proprietary systems.\n\n### 3. Admin Panel\n\nBecause trolls exist, I built a moderation panel at `/admin/moderate`. It's protected by an admin key (randomly generated, stored in environment variables) and lets me:\n\n- View all comments\n- Approve/reject/delete\n- See spam patterns\n- Check rate limit stats\n\nIt's basic but functional. And since it's just SQL queries, I can also moderate via command line if needed:\n\n```bash\nwrangler d1 execute blog-db --remote \\\n  --command \"DELETE FROM comments WHERE id = 666\"\n```\n\n### 4. Party Parrots \u003Cimg src=\"/parrot.gif\" alt=\"parrot\" style=\"display: inline; height: 30px; width: auto; vertical-align: middle; margin-top: 30px;\" />\n\nHere's where I added personality. I'm a card-carrying member of the [Cult of the Party Parrot](https://cultofthepartyparrot.com/), so naturally, when you like a post on my blog, you get rewarded with party parrots.\n\nYou can \"like\" up to 50 times per post (like Medium). Trust me, you'll know when you've reached the limit.\n\nThis kind of whimsy is what makes personal blogs fun. Big platforms would A/B test this to death. I just added it because it makes me smile.\n\n### 5. Emergency Controls\n\nPlanning for the worst is good practice. I added:\n\n- **Extreme rate limiting** - Can dial it down to 1 comment per hour if needed\n- **Manual approval mode** - One line change to require all comments be approved\n- **Spam patterns** - Auto-detect and silently reject obvious spam\n- **Kill switch** - Can disable comments entirely in 30 seconds\n\nHopefully I never need these. But it's nice to know they're there.\n\n## The WTF Moments of Learning Cloudflare\n\nI weep for the people who were forced to learn this platform from reading the docs alone. Cloudflare's platform is powerful, but there are... nuances, to put it generously.\n\n**The Static Page Trap:** When I first started, I created a static Cloudflare Pages site and threw up a simple HTML \"hello world!\" file. This setup would have been great for just HTML+CSS+JS, but it was completely incompatible with Astro's server actions. After much head-scratching, I realized I needed to delete the entire Worker and create a new Pages project. This wasn't obvious from the Cloudflare interface - there's no \"hey, you've gone down the wrong path here, bud\" warning.\n\n**The Binding Maze:** Many things in Cloudflare are configured to work in one specific way or with one type of system. I spent 30 minutes debugging \"DB is not defined\" before realizing I forgot to bind the database in the dashboard. Not the code. Not wrangler.toml. The *dashboard*. In a different settings page. Cool cool cool.\n\n**The Breadcrumb Hell:** Here's the thing that caused me the most anguish: Cloudflare's breadcrumbs are confusing as fuck. The AI would sometimes reference navigation paths that didn't match what I was seeing. I'd say \"I don't see that option, I see Settings and Functions.\" Claude would respond, \"Oh, you're on the Functions page. You need to be on the Bindings page.\" Finding when I was on the wrong path was the tricky part, but AI is surprisingly good at picking up on where you've diverged once you give it context clues (and swear at it enough).\n\n**A Note on Instructions:** Because the breadcrumbs caused me so much confusion, I'm using more general terms to describe the actions in this tutorial. Additionally, Cloudflare could push a UI update tomorrow that makes specific navigation paths irrelevant or incorrect - and that's likely the source of the issue. The AI was probably trained on out-of-date definitions of the Cloudflare platform. So I'll tell you *what* to do, but you might need to hunt around a bit to find *where* to do it.\n\n**What Is Wrangler Anyways?** Wrangler is Cloudflare's CLI tool for interacting with your local and production databases. You also have to authenticate it, which was kind of nerve-wracking. When the prompt popped up asking me to authorize it in my browser, I had a moment of \"did I really want to click that? Am I about to give away all of my data by mistake?\" It felt almost like a leap of faith. The onboarding experience could have been smoother - maybe some reassurance that this is normal and expected? Once I got past that hurdle, executing commands was pretty straightforward.\n\n**Wrangler vs Dashboard:** Some things you configure in the CLI, some in the dashboard, and it's not always obvious which. Environment variables? Dashboard. Database creation? CLI. Database binding? Dashboard. Database queries? CLI. See the pattern? Me neither.\n\n**The Thing About AI:** I built this entire blog in about 2 days of evening work. Without AI, it would've been 2 weeks of StackOverflow rabbit holes and reading scattered documentation. The Cloudflare docs are comprehensive but not always beginner-friendly. Having an AI that can read them, understand my specific situation, and generate working examples? Absolute game changer.\n\n## The Portability Factor\n\nThis was crucial to me. If Cloudflare decides to [enshittify](https://en.wikipedia.org/wiki/Enshittification) their platform (looking at you, every blogging platform from the 2000s that got acquired and killed), I can leave. Here's how:\n\n```bash\n# Export the entire database\nwrangler d1 export blog-db --output=my-data.sql\n\n# It's just SQLite, works anywhere\nsqlite3 backup.db \u003C my-data.sql\n```\n\nThe blog itself is static files + server actions. Astro can deploy to Vercel, Netlify, your own VPS, or any other Node.js host.\n\n## The Results\n\nWhat did this cost me?\n\n- **Cloudflare Pages:** $0/month\n- **D1 Database:** $0/month (under free tier limits)\n- **Turnstile:** $0/month (unlimited on free tier)\n- **Domain:** $12/year (I already owned it)\n- **Time:** ~2 evenings\n\nWhat did I get?\n\n- A blog that's actually mine\n- Comments and engagement\n- Global CDN performance\n- No ads or tracking\n- Complete portability\n- The satisfaction of building it myself\n- An extra half roll of 3D printing filament per month, based on the money I saved on hosting (I recommend SUNLU PETG)\n\n## Want to Build Your Own?\n\nIf this sounds appealing, here's the rough roadmap:\n\n### Step 1: Set Up Astro\n```bash\nnpm create astro@latest my-blog\ncd my-blog\nnpx astro add cloudflare tailwind\n```\n\n### Step 2: Choose Your Theme\n- Start from scratch (brave)\n- Use a template like [Dante](https://github.com/JustGoodUI/dante-astro-theme)\n- Steal shamelessly from blogs you like (*Ed. note: even Claude calls it \"stealing.\" Welcome to the brave new world.*)\n\n### Step 3: Add Dark Mode Properly\n```javascript\n// Prevent flash of unstyled content\nconst getThemePreference = () => {\n  if (typeof localStorage !== 'undefined' && \n      localStorage.getItem('theme')) {\n    return localStorage.getItem('theme');\n  }\n  return window.matchMedia('(prefers-color-scheme: dark)').matches \n    ? 'dark' \n    : 'light';\n};\n```\n\n### Step 4: Set Up Cloudflare D1\n```bash\n# Create database\nnpx wrangler d1 create my-blog-db\n\n# Initialize schema\nnpx wrangler d1 execute my-blog-db --file=schema.sql\n```\n\n### Step 5: Add Turnstile (No Email Required!)\n1. Get free keys from [Cloudflare Dashboard](https://dash.cloudflare.com/)\n2. Add to your comment form\n3. Verify server-side\n\n**Hot tip:** Don't collect emails unless you need them. Users appreciate it, and you avoid having the Belgian police show up to fine you for GDPR violations.\n\n**The Testing Problem:** Getting the production API to actually call Cloudflare's crazy spam detection system locally is a fool's errand, so I recommend just using the testing version of Turnstile provided by Cloudflare. Getting it to work in a staging environment requires creating a whole new set of bindings, which wasn't obvious to me as a Cloudflare newcomer. It's also a headache for reasons I won't bore you with. I'll confess: I wasn't able to successfully test Turnstile in staging, but I decided to rely on Cloudflare's easy rollback if it didn't work in production. Once I was relatively confident the only reason it wasn't working was that I wasn't deployed to prod, I just shipped it. The luxury of owning your own project - you can break the rules when you want to.\n\n### Step 6: Build the Admin Panel\nProtect it with a secret key in environment variables:\n\n```typescript\nif (request.headers.get('X-Admin-Key') !== env.ADMIN_KEY) {\n  return new Response('Unauthorized', { status: 401 });\n}\n```\n\n**A Note on Testing:** When I first tested the admin panel, I ran into some weird serialization bugs which meant the data displayed on the admin panel was completely incorrect. The AI claimed it was actually a bug in Astro itself (which I didn't fully verify - could have been an AI hallucination). Either way, the agent eventually figured out a different way to query the admin panel data that worked, without me having to debug it manually. Reminder: you still have to test whatever the AI is making. It's not magic, it's probabilistic text generation that happens to be really good at writing code.\n\n### Step 7: Add Personality\nThis is your blog. Add gifs, weird fonts, easter eggs, a gallery of pictures of your cat - whatever makes you happy. The big platforms can't do this because they're optimizing for \"engagement metrics.\" You're optimizing for something better: making yourself smile.\n\n### Step 8: Deploy\n\nFirst, you'll need to connect your GitHub repo to Cloudflare Pages in the dashboard. Look for the option to create a new Pages project and connect it to Git. Select your repo, configure the build settings (framework preset: Astro, build command: `npm run build`, output directory: `dist`), and deploy.\n\nAfter the initial setup:\n\n```bash\ngit push\n```\n\nThat's it. Cloudflare Pages auto-deploys from your GitHub repo. \n\n**Best practice:** Push your changes to a feature branch, open a PR to `main`, and Cloudflare will automatically build a preview deployment for that branch. You get a URL like `feature-branch-name.yourproject.pages.dev` to test before merging to production. This is how you do it right - test in preview, then merge to prod.\n\n## The Bigger Picture\n\nThis blog cost me nothing but time, and I learned a bunch:\n\n- Astro's islands architecture is genius for blogs\n- Cloudflare's free tier is shockingly generous\n- SQLite is underrated for small-to-medium apps\n- AI makes learning new platforms way less painful\n- Building things yourself is deeply satisfying\n\nLet's be real: this is a vanity project. It's as much about platform ownership as it is about blogging. But here's the thing - once you're off the ground with your own platform, you have far less need for the Substacks and Mediums of the world. You're not dependent on their algorithms, their pivot to video, their \"new monetization strategy,\" or whatever they decide to do next quarter.\n\nI own the platform, the data, the design, and the destiny. That's worth the two evenings it took to build.\n\n## Try It Yourself\n\nThe source code for this blog is [public on GitHub](https://github.com/Ryan-Haines/blog). Clone it, modify it, make it yours. That's the whole point.\n\nAnd hey, if you build something cool, leave a comment below. Or don't - I'm not your boss. But I'd love to hear what you build.\n\nJust don't spam me. Turnstile is watching. 👀\n\n---\n**P.S.** - Don't forget to like the post and get your party parrot!","src/content/blog/building-a-zero-cost-blog.md","347fd8001b8c9cc0",{"html":148,"metadata":149},"\u003Cblockquote>\n\u003Cp>How I finally put my domain to work using Cloudflare’s free tier, Astro, and party parrots\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"the-domain-that-did-nothing\">The Domain That Did Nothing\u003C/h2>\n\u003Cp>I’ve owned \u003Ccode>ryanhaines.com\u003C/code> for years. And what did I do with it? Absolutely nothing productive. It just redirected to my LinkedIn profile like some kind of digital business card that cost me $12/year to maintain.\u003C/p>\n\u003Cp>Why? Because I’m \u003Cstrong>frugal\u003C/strong>. I wasn’t about to drop $5-20/month on hosting when all I wanted was a simple blog to share technical posts. That’s $60-240/year to host some markdown files and a contact form.\u003C/p>\n\u003Cp>But then Cloudflare happened. Free tier. D1 database. Pages hosting. All free. Not “free trial” or “free credits for 3 months” - actually free. So naturally, I had to build something.\u003C/p>\n\u003Ch2 id=\"the-requirements\">The Requirements\u003C/h2>\n\u003Cp>I had a few non-negotiables:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Write in Markdown\u003C/strong> - I’m a developer, not a WordPress admin\u003C/li>\n\u003Cli>\u003Cstrong>Comments and likes\u003C/strong> - Static sites are cool, but I wanted interaction\u003C/li>\n\u003Cli>\u003Cstrong>Full ownership\u003C/strong> - If Cloudflare \u003Ca href=\"https://en.wikipedia.org/wiki/Enshittification\">enshittifies\u003C/a>, I can export and leave\u003C/li>\n\u003Cli>\u003Cstrong>Zero cost\u003C/strong> - The whole point, really\u003C/li>\n\u003Cli>\u003Cstrong>No vendor lock-in\u003C/strong> - SQLite dumps are portable. Vendor-specific APIs are not.\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"why-not-use-insert-popular-service-here\">Why Not Use [Insert Popular Service Here]?\u003C/h2>\n\u003Cp>You’re probably thinking: “Why not just use Disqus? Or Giscus? Or Utterances?”\u003C/p>\n\u003Cp>Great question! Here’s why I said no:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Disqus\u003C/strong> - Ads, tracking, owned by a ad-tech company. Hard pass.\u003C/li>\n\u003Cli>\u003Cstrong>Giscus/Utterances\u003C/strong> - Requires readers to have GitHub accounts. My mom doesn’t have a GitHub account.\u003C/li>\n\u003Cli>\u003Cstrong>Commento/Hyvor\u003C/strong> - Costs money after free tier. See “frugal” above.\u003C/li>\n\u003Cli>\u003Cstrong>Facebook Comments\u003C/strong> - lol no\u003C/li>\n\u003C/ul>\n\u003Cp>I wanted something simple: name + comment. No login, no tracking, no third-party dependencies that could vanish overnight. A form, a database, and spam protection - that’s all it takes.\u003C/p>\n\u003Ch2 id=\"the-stack\">The Stack\u003C/h2>\n\u003Cp>After some research (and by research, I mean asking Claude what would work), I landed on:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ca href=\"https://astro.build/\">Astro\u003C/a>\u003C/strong> - Fast, markdown-friendly, modern\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ca href=\"https://pages.cloudflare.com/\">Cloudflare Pages\u003C/a>\u003C/strong> - Free hosting with global CDN\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ca href=\"https://developers.cloudflare.com/d1/\">Cloudflare D1\u003C/a>\u003C/strong> - Free SQLite database (5M reads/day on free tier!)\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ca href=\"https://www.cloudflare.com/products/turnstile/\">Turnstile\u003C/a>\u003C/strong> - Free CAPTCHA that doesn’t make users play “find the crosswalk”\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ca href=\"https://tailwindcss.com/\">Tailwind CSS\u003C/a>\u003C/strong> - Because hand-writing CSS in 2025 is for masochists\u003C/li>\n\u003C/ul>\n\u003Cp>Everything here is either standard web tech (Astro, Tailwind) or built on SQLite (D1), which means the data is portable and the code isn’t locked to any single platform.\u003C/p>\n\u003Ch2 id=\"building-it-the-fun-parts\">Building It (The Fun Parts)\u003C/h2>\n\u003Ch3 id=\"1-theme-setup\">1. Theme Setup\u003C/h3>\n\u003Cp>First things first: I’m not a designer. So I found the beautiful \u003Ca href=\"https://github.com/JustGoodUI/dante-astro-theme\">Dante Astro Theme\u003C/a> and made it my own.\u003C/p>\n\u003Cp>\u003Cstrong>Important lesson:\u003C/strong> If you add dark mode, handle the flash of unstyled content! Nothing says “amateur hour” like your site flickering between light and dark on every page load. Astro makes this easy with inline theme scripts that run before the page renders.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"astro\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#B392F0\"> is:inline\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // This runs BEFORE page renders\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> theme\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> localStorage.\u003C/span>\u003Cspan style=\"color:#B392F0\">getItem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'theme'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'light'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  document.documentElement.classList.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(theme);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-the-commenting-system\">2. The Commenting System\u003C/h3>\n\u003Cp>This was the meaty part. I built a custom system with:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Sidebar panel\u003C/strong> - Comments slide in from the right (Medium-style)\u003C/li>\n\u003Cli>\u003Cstrong>No email collection\u003C/strong> - I’m not a marketing agency\u003C/li>\n\u003Cli>\u003Cstrong>Rate limiting\u003C/strong> - 2 comments per 5 minutes per IP\u003C/li>\n\u003Cli>\u003Cstrong>Turnstile CAPTCHA\u003C/strong> - Stops the bots\u003C/li>\n\u003Cli>\u003Cstrong>Spam detection\u003C/strong> - Pattern matching for common spam phrases\u003C/li>\n\u003C/ul>\n\u003Cp>The database schema is dead simple:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> comments\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  id \u003C/span>\u003Cspan style=\"color:#F97583\">INTEGER\u003C/span>\u003Cspan style=\"color:#F97583\"> PRIMARY KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  post_slug \u003C/span>\u003Cspan style=\"color:#F97583\">TEXT\u003C/span>\u003Cspan style=\"color:#F97583\"> NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  author_name \u003C/span>\u003Cspan style=\"color:#F97583\">TEXT\u003C/span>\u003Cspan style=\"color:#F97583\"> NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  content \u003C/span>\u003Cspan style=\"color:#F97583\">TEXT\u003C/span>\u003Cspan style=\"color:#F97583\"> NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  created_at \u003C/span>\u003Cspan style=\"color:#F97583\">INTEGER\u003C/span>\u003Cspan style=\"color:#F97583\"> NOT NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ip_address \u003C/span>\u003Cspan style=\"color:#F97583\">TEXT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  approved \u003C/span>\u003Cspan style=\"color:#F97583\">INTEGER\u003C/span>\u003Cspan style=\"color:#F97583\"> DEFAULT\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Standard SQLite with no foreign keys to proprietary systems.\u003C/p>\n\u003Ch3 id=\"3-admin-panel\">3. Admin Panel\u003C/h3>\n\u003Cp>Because trolls exist, I built a moderation panel at \u003Ccode>/admin/moderate\u003C/code>. It’s protected by an admin key (randomly generated, stored in environment variables) and lets me:\u003C/p>\n\u003Cul>\n\u003Cli>View all comments\u003C/li>\n\u003Cli>Approve/reject/delete\u003C/li>\n\u003Cli>See spam patterns\u003C/li>\n\u003Cli>Check rate limit stats\u003C/li>\n\u003C/ul>\n\u003Cp>It’s basic but functional. And since it’s just SQL queries, I can also moderate via command line if needed:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">wrangler\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> d1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> execute\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> blog-db\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --remote\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  --command\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"DELETE FROM comments WHERE id = 666\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"4-party-parrots\">4. Party Parrots \u003Cimg src=\"/parrot.gif\" alt=\"parrot\" style=\"display: inline; height: 30px; width: auto; vertical-align: middle; margin-top: 30px;\">\u003C/h3>\n\u003Cp>Here’s where I added personality. I’m a card-carrying member of the \u003Ca href=\"https://cultofthepartyparrot.com/\">Cult of the Party Parrot\u003C/a>, so naturally, when you like a post on my blog, you get rewarded with party parrots.\u003C/p>\n\u003Cp>You can “like” up to 50 times per post (like Medium). Trust me, you’ll know when you’ve reached the limit.\u003C/p>\n\u003Cp>This kind of whimsy is what makes personal blogs fun. Big platforms would A/B test this to death. I just added it because it makes me smile.\u003C/p>\n\u003Ch3 id=\"5-emergency-controls\">5. Emergency Controls\u003C/h3>\n\u003Cp>Planning for the worst is good practice. I added:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Extreme rate limiting\u003C/strong> - Can dial it down to 1 comment per hour if needed\u003C/li>\n\u003Cli>\u003Cstrong>Manual approval mode\u003C/strong> - One line change to require all comments be approved\u003C/li>\n\u003Cli>\u003Cstrong>Spam patterns\u003C/strong> - Auto-detect and silently reject obvious spam\u003C/li>\n\u003Cli>\u003Cstrong>Kill switch\u003C/strong> - Can disable comments entirely in 30 seconds\u003C/li>\n\u003C/ul>\n\u003Cp>Hopefully I never need these. But it’s nice to know they’re there.\u003C/p>\n\u003Ch2 id=\"the-wtf-moments-of-learning-cloudflare\">The WTF Moments of Learning Cloudflare\u003C/h2>\n\u003Cp>I weep for the people who were forced to learn this platform from reading the docs alone. Cloudflare’s platform is powerful, but there are… nuances, to put it generously.\u003C/p>\n\u003Cp>\u003Cstrong>The Static Page Trap:\u003C/strong> When I first started, I created a static Cloudflare Pages site and threw up a simple HTML “hello world!” file. This setup would have been great for just HTML+CSS+JS, but it was completely incompatible with Astro’s server actions. After much head-scratching, I realized I needed to delete the entire Worker and create a new Pages project. This wasn’t obvious from the Cloudflare interface - there’s no “hey, you’ve gone down the wrong path here, bud” warning.\u003C/p>\n\u003Cp>\u003Cstrong>The Binding Maze:\u003C/strong> Many things in Cloudflare are configured to work in one specific way or with one type of system. I spent 30 minutes debugging “DB is not defined” before realizing I forgot to bind the database in the dashboard. Not the code. Not wrangler.toml. The \u003Cem>dashboard\u003C/em>. In a different settings page. Cool cool cool.\u003C/p>\n\u003Cp>\u003Cstrong>The Breadcrumb Hell:\u003C/strong> Here’s the thing that caused me the most anguish: Cloudflare’s breadcrumbs are confusing as fuck. The AI would sometimes reference navigation paths that didn’t match what I was seeing. I’d say “I don’t see that option, I see Settings and Functions.” Claude would respond, “Oh, you’re on the Functions page. You need to be on the Bindings page.” Finding when I was on the wrong path was the tricky part, but AI is surprisingly good at picking up on where you’ve diverged once you give it context clues (and swear at it enough).\u003C/p>\n\u003Cp>\u003Cstrong>A Note on Instructions:\u003C/strong> Because the breadcrumbs caused me so much confusion, I’m using more general terms to describe the actions in this tutorial. Additionally, Cloudflare could push a UI update tomorrow that makes specific navigation paths irrelevant or incorrect - and that’s likely the source of the issue. The AI was probably trained on out-of-date definitions of the Cloudflare platform. So I’ll tell you \u003Cem>what\u003C/em> to do, but you might need to hunt around a bit to find \u003Cem>where\u003C/em> to do it.\u003C/p>\n\u003Cp>\u003Cstrong>What Is Wrangler Anyways?\u003C/strong> Wrangler is Cloudflare’s CLI tool for interacting with your local and production databases. You also have to authenticate it, which was kind of nerve-wracking. When the prompt popped up asking me to authorize it in my browser, I had a moment of “did I really want to click that? Am I about to give away all of my data by mistake?” It felt almost like a leap of faith. The onboarding experience could have been smoother - maybe some reassurance that this is normal and expected? Once I got past that hurdle, executing commands was pretty straightforward.\u003C/p>\n\u003Cp>\u003Cstrong>Wrangler vs Dashboard:\u003C/strong> Some things you configure in the CLI, some in the dashboard, and it’s not always obvious which. Environment variables? Dashboard. Database creation? CLI. Database binding? Dashboard. Database queries? CLI. See the pattern? Me neither.\u003C/p>\n\u003Cp>\u003Cstrong>The Thing About AI:\u003C/strong> I built this entire blog in about 2 days of evening work. Without AI, it would’ve been 2 weeks of StackOverflow rabbit holes and reading scattered documentation. The Cloudflare docs are comprehensive but not always beginner-friendly. Having an AI that can read them, understand my specific situation, and generate working examples? Absolute game changer.\u003C/p>\n\u003Ch2 id=\"the-portability-factor\">The Portability Factor\u003C/h2>\n\u003Cp>This was crucial to me. If Cloudflare decides to \u003Ca href=\"https://en.wikipedia.org/wiki/Enshittification\">enshittify\u003C/a> their platform (looking at you, every blogging platform from the 2000s that got acquired and killed), I can leave. Here’s how:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Export the entire database\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">wrangler\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> d1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> export\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> blog-db\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --output=my-data.sql\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># It's just SQLite, works anywhere\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sqlite3\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> backup.db\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my-data.sql\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The blog itself is static files + server actions. Astro can deploy to Vercel, Netlify, your own VPS, or any other Node.js host.\u003C/p>\n\u003Ch2 id=\"the-results\">The Results\u003C/h2>\n\u003Cp>What did this cost me?\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Cloudflare Pages:\u003C/strong> $0/month\u003C/li>\n\u003Cli>\u003Cstrong>D1 Database:\u003C/strong> $0/month (under free tier limits)\u003C/li>\n\u003Cli>\u003Cstrong>Turnstile:\u003C/strong> $0/month (unlimited on free tier)\u003C/li>\n\u003Cli>\u003Cstrong>Domain:\u003C/strong> $12/year (I already owned it)\u003C/li>\n\u003Cli>\u003Cstrong>Time:\u003C/strong> ~2 evenings\u003C/li>\n\u003C/ul>\n\u003Cp>What did I get?\u003C/p>\n\u003Cul>\n\u003Cli>A blog that’s actually mine\u003C/li>\n\u003Cli>Comments and engagement\u003C/li>\n\u003Cli>Global CDN performance\u003C/li>\n\u003Cli>No ads or tracking\u003C/li>\n\u003Cli>Complete portability\u003C/li>\n\u003Cli>The satisfaction of building it myself\u003C/li>\n\u003Cli>An extra half roll of 3D printing filament per month, based on the money I saved on hosting (I recommend SUNLU PETG)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"want-to-build-your-own\">Want to Build Your Own?\u003C/h2>\n\u003Cp>If this sounds appealing, here’s the rough roadmap:\u003C/p>\n\u003Ch3 id=\"step-1-set-up-astro\">Step 1: Set Up Astro\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> create\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> astro@latest\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my-blog\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my-blog\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> astro\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> add\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> cloudflare\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tailwind\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"step-2-choose-your-theme\">Step 2: Choose Your Theme\u003C/h3>\n\u003Cul>\n\u003Cli>Start from scratch (brave)\u003C/li>\n\u003Cli>Use a template like \u003Ca href=\"https://github.com/JustGoodUI/dante-astro-theme\">Dante\u003C/a>\u003C/li>\n\u003Cli>Steal shamelessly from blogs you like (\u003Cem>Ed. note: even Claude calls it “stealing.” Welcome to the brave new world.\u003C/em>)\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"step-3-add-dark-mode-properly\">Step 3: Add Dark Mode Properly\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Prevent flash of unstyled content\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> getThemePreference\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> localStorage \u003C/span>\u003Cspan style=\"color:#F97583\">!==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'undefined'\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      localStorage.\u003C/span>\u003Cspan style=\"color:#B392F0\">getItem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'theme'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> localStorage.\u003C/span>\u003Cspan style=\"color:#B392F0\">getItem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'theme'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> window.\u003C/span>\u003Cspan style=\"color:#B392F0\">matchMedia\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'(prefers-color-scheme: dark)'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).matches \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'dark'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'light'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"step-4-set-up-cloudflare-d1\">Step 4: Set Up Cloudflare D1\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Create database\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> wrangler\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> d1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> create\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my-blog-db\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Initialize schema\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> wrangler\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> d1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> execute\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my-blog-db\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --file=schema.sql\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"step-5-add-turnstile-no-email-required\">Step 5: Add Turnstile (No Email Required!)\u003C/h3>\n\u003Col>\n\u003Cli>Get free keys from \u003Ca href=\"https://dash.cloudflare.com/\">Cloudflare Dashboard\u003C/a>\u003C/li>\n\u003Cli>Add to your comment form\u003C/li>\n\u003Cli>Verify server-side\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Hot tip:\u003C/strong> Don’t collect emails unless you need them. Users appreciate it, and you avoid having the Belgian police show up to fine you for GDPR violations.\u003C/p>\n\u003Cp>\u003Cstrong>The Testing Problem:\u003C/strong> Getting the production API to actually call Cloudflare’s crazy spam detection system locally is a fool’s errand, so I recommend just using the testing version of Turnstile provided by Cloudflare. Getting it to work in a staging environment requires creating a whole new set of bindings, which wasn’t obvious to me as a Cloudflare newcomer. It’s also a headache for reasons I won’t bore you with. I’ll confess: I wasn’t able to successfully test Turnstile in staging, but I decided to rely on Cloudflare’s easy rollback if it didn’t work in production. Once I was relatively confident the only reason it wasn’t working was that I wasn’t deployed to prod, I just shipped it. The luxury of owning your own project - you can break the rules when you want to.\u003C/p>\n\u003Ch3 id=\"step-6-build-the-admin-panel\">Step 6: Build the Admin Panel\u003C/h3>\n\u003Cp>Protect it with a secret key in environment variables:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (request.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'X-Admin-Key'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">!==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">ADMIN_KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Response\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Unauthorized'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { status: \u003C/span>\u003Cspan style=\"color:#79B8FF\">401\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>A Note on Testing:\u003C/strong> When I first tested the admin panel, I ran into some weird serialization bugs which meant the data displayed on the admin panel was completely incorrect. The AI claimed it was actually a bug in Astro itself (which I didn’t fully verify - could have been an AI hallucination). Either way, the agent eventually figured out a different way to query the admin panel data that worked, without me having to debug it manually. Reminder: you still have to test whatever the AI is making. It’s not magic, it’s probabilistic text generation that happens to be really good at writing code.\u003C/p>\n\u003Ch3 id=\"step-7-add-personality\">Step 7: Add Personality\u003C/h3>\n\u003Cp>This is your blog. Add gifs, weird fonts, easter eggs, a gallery of pictures of your cat - whatever makes you happy. The big platforms can’t do this because they’re optimizing for “engagement metrics.” You’re optimizing for something better: making yourself smile.\u003C/p>\n\u003Ch3 id=\"step-8-deploy\">Step 8: Deploy\u003C/h3>\n\u003Cp>First, you’ll need to connect your GitHub repo to Cloudflare Pages in the dashboard. Look for the option to create a new Pages project and connect it to Git. Select your repo, configure the build settings (framework preset: Astro, build command: \u003Ccode>npm run build\u003C/code>, output directory: \u003Ccode>dist\u003C/code>), and deploy.\u003C/p>\n\u003Cp>After the initial setup:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> push\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>That’s it. Cloudflare Pages auto-deploys from your GitHub repo.\u003C/p>\n\u003Cp>\u003Cstrong>Best practice:\u003C/strong> Push your changes to a feature branch, open a PR to \u003Ccode>main\u003C/code>, and Cloudflare will automatically build a preview deployment for that branch. You get a URL like \u003Ccode>feature-branch-name.yourproject.pages.dev\u003C/code> to test before merging to production. This is how you do it right - test in preview, then merge to prod.\u003C/p>\n\u003Ch2 id=\"the-bigger-picture\">The Bigger Picture\u003C/h2>\n\u003Cp>This blog cost me nothing but time, and I learned a bunch:\u003C/p>\n\u003Cul>\n\u003Cli>Astro’s islands architecture is genius for blogs\u003C/li>\n\u003Cli>Cloudflare’s free tier is shockingly generous\u003C/li>\n\u003Cli>SQLite is underrated for small-to-medium apps\u003C/li>\n\u003Cli>AI makes learning new platforms way less painful\u003C/li>\n\u003Cli>Building things yourself is deeply satisfying\u003C/li>\n\u003C/ul>\n\u003Cp>Let’s be real: this is a vanity project. It’s as much about platform ownership as it is about blogging. But here’s the thing - once you’re off the ground with your own platform, you have far less need for the Substacks and Mediums of the world. You’re not dependent on their algorithms, their pivot to video, their “new monetization strategy,” or whatever they decide to do next quarter.\u003C/p>\n\u003Cp>I own the platform, the data, the design, and the destiny. That’s worth the two evenings it took to build.\u003C/p>\n\u003Ch2 id=\"try-it-yourself\">Try It Yourself\u003C/h2>\n\u003Cp>The source code for this blog is \u003Ca href=\"https://github.com/Ryan-Haines/blog\">public on GitHub\u003C/a>. Clone it, modify it, make it yours. That’s the whole point.\u003C/p>\n\u003Cp>And hey, if you build something cool, leave a comment below. Or don’t - I’m not your boss. But I’d love to hear what you build.\u003C/p>\n\u003Cp>Just don’t spam me. Turnstile is watching. 👀\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cstrong>P.S.\u003C/strong> - Don’t forget to like the post and get your party parrot!\u003C/p>",{"headings":150,"localImagePaths":223,"remoteImagePaths":224,"frontmatter":225,"imagePaths":228},[151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220],{"depth":30,"slug":152,"text":153},"the-domain-that-did-nothing","The Domain That Did Nothing",{"depth":30,"slug":155,"text":156},"the-requirements","The Requirements",{"depth":30,"slug":158,"text":159},"why-not-use-insert-popular-service-here","Why Not Use [Insert Popular Service Here]?",{"depth":30,"slug":161,"text":162},"the-stack","The Stack",{"depth":30,"slug":164,"text":165},"building-it-the-fun-parts","Building It (The Fun Parts)",{"depth":40,"slug":167,"text":168},"1-theme-setup","1. Theme Setup",{"depth":40,"slug":170,"text":171},"2-the-commenting-system","2. The Commenting System",{"depth":40,"slug":173,"text":174},"3-admin-panel","3. Admin Panel",{"depth":40,"slug":176,"text":177},"4-party-parrots","4. Party Parrots ",{"depth":40,"slug":179,"text":180},"5-emergency-controls","5. Emergency Controls",{"depth":30,"slug":182,"text":183},"the-wtf-moments-of-learning-cloudflare","The WTF Moments of Learning Cloudflare",{"depth":30,"slug":185,"text":186},"the-portability-factor","The Portability Factor",{"depth":30,"slug":188,"text":189},"the-results","The Results",{"depth":30,"slug":191,"text":192},"want-to-build-your-own","Want to Build Your Own?",{"depth":40,"slug":194,"text":195},"step-1-set-up-astro","Step 1: Set Up Astro",{"depth":40,"slug":197,"text":198},"step-2-choose-your-theme","Step 2: Choose Your Theme",{"depth":40,"slug":200,"text":201},"step-3-add-dark-mode-properly","Step 3: Add Dark Mode Properly",{"depth":40,"slug":203,"text":204},"step-4-set-up-cloudflare-d1","Step 4: Set Up Cloudflare D1",{"depth":40,"slug":206,"text":207},"step-5-add-turnstile-no-email-required","Step 5: Add Turnstile (No Email Required!)",{"depth":40,"slug":209,"text":210},"step-6-build-the-admin-panel","Step 6: Build the Admin Panel",{"depth":40,"slug":212,"text":213},"step-7-add-personality","Step 7: Add Personality",{"depth":40,"slug":215,"text":216},"step-8-deploy","Step 8: Deploy",{"depth":30,"slug":218,"text":219},"the-bigger-picture","The Bigger Picture",{"depth":30,"slug":221,"text":222},"try-it-yourself","Try It Yourself",[],[],{"title":137,"description":138,"pubDate":226,"tags":227},["Date","2025-10-28T00:00:00.000Z"],[141,142,143,21],[],"building-a-zero-cost-blog.md","scrum-is-dead-long-live-scrum",{"id":230,"data":232,"body":242,"filePath":243,"digest":244,"rendered":245,"legacyId":291},{"title":233,"description":234,"pubDate":235,"tags":236},"SCRUM is Dead, Long Live SCRUM!","Agile was optimized for human throughput. AI exposes its latency. How process friction is freezing out the agentic revolution - and what to do about it.",["Date","2025-10-28T00:00:00.000Z"],[237,238,239,240,241],"agile","ai","development","process","productivity","\u003Cstyle>\n/* Hide floating image on mobile, show mobile image */\n@media (max-width: 767px) {\n  .totem-pole-float {\n    display: none !important;\n  }\n  .totem-pole-mobile {\n    display: block !important;\n  }\n}\n\n/* Show floating image on desktop, hide mobile image */\n@media (min-width: 768px) {\n  .totem-pole-float {\n    display: block !important;\n  }\n  .totem-pole-mobile {\n    display: none !important;\n  }\n}\n\u003C/style>\n\n> Agile for the Agentic Age\n\n**ICE** /īs/ *noun*\n\n1. Water frozen into a solid state.\n2. *Slang (Cyberpunk)*: Intrusion Countermeasure Electronics - defensive software designed to kill intruders who attempt unauthorized system access.\n3. *Slang (Software Development)*: Procedural mechanisms that defend organizations against chaos, but also freeze out spontaneous creation and compounding automation gains.\n\n---\n\n## The Original Social Contract: Three Axes of Power\n\nTo understand why Agile succeeded, you need to understand what each stakeholder gained from it. There are three main axes of power in any engineering organization, and Agile provided value to all of them:\n\n\u003Cdiv class=\"totem-pole-float\" style=\"float: right; margin: 0 0 0 1rem; max-width: 400px;\">\n\n![The Original Social Contract: Three Axes of Power](/totemPole.jpg)\n\n\u003C/div>\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Business\u003C/strong>\u003C/summary>\n\nGets predictable timelines for delivery and regular updates. This helps them plan expenses, sign contracts, set roadmaps, and hit quarterly targets. Agile gave the business legibility - they could finally see what engineering was doing and when it would be done.\n\n\u003C/details>\n\n**Key gain**: Metrics and predictability.\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Product Management\u003C/strong>\u003C/summary>\n\nGets a clear way to manage workload and identify when resources can be scaled up or down. Visibility into day-to-day progress helps them understand blockers, track what's taking longer than expected, and identify impediments before they derail delivery. When Business priorities shift, Product can quickly adjust team velocity and capacity without major restructuring.\n\n\u003C/details>\n\n**Key gain**: Visibility and control.\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Developers\u003C/strong>\u003C/summary>\n\nGets small, manageable units of work. When done correctly, this drives higher quality and velocity. Product Management breaking down business requirements into epics into stories into tasks makes complexity tractable.\n\n\u003C/details>\n\n**Key gain**: Well-scoped and clearly defined work.\n\n\u003Cdiv class=\"totem-pole-mobile\" style=\"display: none; text-align: center; margin: 2rem 0;\">\n\u003Cimg src=\"/totemPole.jpg\" alt=\"The Original Social Contract: Three Axes of Power\" style=\"max-width: 100%; max-height: 400px; height: auto; margin: 0 auto;\">\n\u003C/div>\n\nThe genius of Agile was that it created a system where everyone got something valuable. But as Agile matured and spread across the industry, something changed.\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>What changed?\u003C/strong>\u003C/summary>\n\nThe tragedy of Agile is what happened next: **it redistributed control upward**.\n\nThe balance of power shifted from passionate engineers solving problems to bean counters measuring velocity. Agile fell into a predictable rut: marathon ceremonies where product managers read ticket descriptions that could have been shared asynchronously, while developers sit through hours of planning for just a few minutes of actual estimation. Story point poker where there's no accountability for implementation time diverging from the estimate. Retrospectives where the same action items appear sprint after sprint, dutifully recorded and promptly forgotten. Sprint planning became sprint approval. Story points became developer surveillance. The ticketing system became an audit trail first and a workflow tool second!\n\n\u003C/details>\n\nThe dynamic, responsive methodology that promised to free developers from waterfall's rigidity became its own kind of straitjacket- but with better metrics!\n\n\u003Cdiv style=\"clear: both;\">\u003C/div>\n\nAnd in a pre-AI era, this was all tolerable. The endless meetings were annoying, but the work still had to be done by a human, and humans are slow. The overhead of process felt proportional to the cost of human labor.\n\n**AI redistributes capability downward, and has no regard for the rules of Agile.** What each level of the totem pole should expect from the sprint process needs to evolve accordingly.\n\n## SCRUM is dead\n\nAgile assumes a closed system with predictable throughput. Real engineering is an open system with stochastic workloads: production incidents, unexpected bugs, emergent technical debt, and now - most importantly - work that AI can complete in minutes rather than days.\n\nConsider the \"drag\" that plagues most modern Agile teams:\n\n- **Unexpected production issues** need fixing NOW, but weren't in the sprint\n- **Developer environment issues** grind productivity to a halt\n- **Business priorities** shift mid-sprint (orders from on high!)\n- **Emergent technical debt** gets discovered during feature work\n\nMost teams handle this in one of a few ways:\n\n1. **Always take X-Y points** in a sprint (where Y is a pessimistic buffer for unexpected work)\n2. **Pad the sprint** with low-priority busywork that can be dropped when urgent issues arise\n3. **Bury their head in the sand** and pretend that any time a sprint isn't completed, there was nothing that could have been done to avoid it\n\nThese approaches assume humans are the constraint, where the bottleneck is implementation time, not decision latency.\n\nWhen an AI can go from \"investigate this bug\" to \"pull request ready for review\" in less time than it takes to jack in and locate the construct, the constraint isn't development time anymore. **The constraint is permission.**\n\nThe sprint process becomes Agile-ICE - not the protective kind that defends against chaos, but the deadly kind designed to kill unauthorized access. Like the ICE in Neuromancer, it doesn't distinguish between a malicious intruder and a legitimate user moving too fast. It just blocks. The lever to deactivate this ICE lies solely with the Scrum Master - usually product management.\n\n**SCRUM isn't bad - it's just obsolete.**\n\nThe framework that revolutionized software development in the 2000s and 2010s is now the thing holding back the next revolution. It's not that the principles are wrong - transparency, inspection, and adaptation remain crucial. It's that the specific mechanics are optimized for the wrong constraint.\n\nIn an agentic world, the bottleneck isn't implementation speed. It's decision latency. It's permission gates. It's process friction that freezes out the exponential gains AI promises.\n\nThe question isn't whether SCRUM will survive - it's whether your organization will survive the transition to an agentic world.\n\n## The Solution: Agentic Tickets\n\nSo how do we thaw the ice without melting into chaos?\n\nCreate a **separate track for AI-driven work** where the AI (with human approval) can create tickets and immediately attempt to solve them.\n\nI'm calling these **Agentic Tickets** (or `AI_CHORE` in JIRA parlance, if you want to be literal).\n\n### Proposal: Formalize the Agentic Ticket Pattern\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Eligibility Criteria:\u003C/strong>\u003C/summary>\n\n- **≤1 story point** (strictly timeboxed)\n- **Clearly scoped** (well-defined problem and success criteria)\n- **Low blast radius** (reversible, doesn't touch critical paths)\n- **Sufficient detail and ease of review** for an AI agent to implement autonomously\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Lifecycle:\u003C/strong>\u003C/summary>\n\n1. Ticket is created (by AI or human+AI)\n2. AI immediately begins work (no sprint planning gate)\n3. AI posts pull request with tests and description\n4. Human reviews (this is critical - never skip this!)\n5. **Success**: PR is approved and merged, human marks ticket as done \n\n   **Failure**: PR fails review, ticket converts to standard issue type and follows normal sprint process\n\n\u003C/details>\n\n**Key Rules:**\n- **Not subject to sprint injection rules** (removes friction for small, valuable work)\n- **Maximum 1 point** (prevents abuse)\n- **Strict timeboxing** (if it's not done in hours, escalate it)\n- **Metrics shift from story points to time-to-resolution** (measure responsiveness, not forecasting)\n\nHere are three scenarios that illustrate how Agile-ICE blocks value delivery in the agentic era.\n\n## Scenario 1: Reactive Debugging - The Ops-to-Fix Pipeline\n\n**You, the engineer on call, are instructed to debug a Datadog error in your production application.**\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>THE OLD WAY (Human-Only)\u003C/strong>\u003C/summary>\n\nYou investigate the issue. Open Datadog, trace through logs, check recent commits, maybe reproduce it locally. If the fix is obvious, you slap together a JIRA ticket and throw it in the backlog. It'll get done someday, hopefully with enough detail that there's no drag when someone picks it up weeks later.\n\nIf the fix isn't obvious, you spend significantly longer trying to gain clarity before creating the ticket.\n\nEither way, the fix happens in 2+ weeks, not 2 hours.\n\n**Process friction** - but at least the investigation took long enough that the process delay felt proportional.\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>TODAY, WITH AGENTS (The Problem)\u003C/strong>\u003C/summary>\n\nYou click the \"open in Cursor\" button in Datadog and ask your agent to help investigate. The agent analyzes the stack trace, reviews recent commits, checks logs, and provides context:\n\n\"This is a null pointer exception caused by a race condition in the payment processing queue. The issue was introduced in commit abc123f when we refactored the retry logic. Here's a proposed fix with tests.\"\n\nYou review it. Looks good. You ask the agent to create a JIRA ticket with all the relevant details.\n\n**AND HERE AGILE-ICE STOPS YOU COLD.**\n\nThe ticket is created. It's in the backlog. Product will prioritize it in the next sprint planning session - two weeks from now. Maybe it gets picked up by you, maybe by someone else who'll need to rebuild context. The pull request that would take the AI a few minutes to generate will take 2-3 weeks to merge.\n\nThe investigation now takes minutes, but the fix still takes weeks. The process latency that was once proportional to human effort is now the dominant cost.\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>THE NEW MODEL (Agentic Tickets)\u003C/strong>\u003C/summary>\n\nYou click the \"open in Cursor\" button in Datadog and ask your agent to help investigate. The agent analyzes the stack trace, reviews recent commits, checks logs, and provides context:\n\n\"This is a null pointer exception caused by a race condition in the payment processing queue. The issue was introduced in commit abc123f when we refactored the retry logic. Here's a proposed fix with tests.\"\n\nYou review it. Looks good. You ask the agent to create an Agentic Ticket and immediately start working on it. The agent creates the ticket, generates the fix, and posts a pull request. Your coworker reviews it, tests pass, and you merge it.\n\nYou've solved the issue end-to-end before the Agile-ICE could even activate. The investigation, fix, review, and merge happen faster than the old process could even categorize and prioritize the work.\n\n\u003C/details>\n\n**The insight**: Process latency is now more expensive than implementation time.\n\n## Scenario 2: Feature Cleanup - Ticket Overlap Collision\n\n**You, the engineer, are informed that there are issues with a recently developed feature. Product has created three tickets detailing problems that require attention.**\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>THE OLD WAY (Human-Only)\u003C/strong>\u003C/summary>\n\nYou read the three tickets and start working. As you dig in, you realize there's overlap - two tickets are addressing symptoms of the same root cause. You also discover two additional edge cases that weren't in the original tickets.\n\nThis triggers the familiar cascade of questions:\n\n- Should the tickets be combined? Do I need to make a case to product, or can I just combine them myself?\n- If they stay separate, will I encounter merge conflicts later?\n- For the new issues I discovered: do I fold them into existing changes (BAD - teammates will hate you) or create new tickets (YES - small changes are happy changes)?\n\nYou create two new tickets for the edge cases and throw them in the backlog. Those new tickets get scheduled for the next sprint. You'll grind away at them 2+ weeks from now when your context has evaporated. Since humans are slow, the 2-week delay doesn't feel like the main bottleneck.\n\n**Process friction** - but since implementation takes days anyway, the delay is tolerable.\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>TODAY, WITH AGENTS (The Problem)\u003C/strong>\u003C/summary>\n\nThe same scenario plays out, but now AI could cut through this ambiguity [like Alexander cutting the Gordian Knot](https://en.wikipedia.org/wiki/Gordian_Knot) - instantly analyzing the overlap, generating fixes for all related issues, and posting clean PRs in 20 minutes.\n\nBut you still have to follow the sprint process. You create the tickets, they go into the backlog, and you wait for product approval. The AI that could have solved everything while context is hot now sits idle for two weeks.\n\n**Agile-ICE removes most of the value** - the tiny fixes that could be done immediately get frozen by process designed for week-long human implementation cycles.\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>THE NEW MODEL (Agentic Tickets)\u003C/strong>\u003C/summary>\n\nYou discover the edge cases, create Agentic Ticket entries for them, and let the AI handle them immediately. Twenty minutes later, you have PRs ready for review. You merge them while the context is still hot, before anyone forgets why these edge cases matter.\n\n\u003C/details>\n\n**The insight**: When AI can resolve ticket ambiguity and implementation in minutes, waiting weeks for sprint planning approval becomes the dominant cost.\n\n## Scenario 3: Proactive Refactoring - Self-Healing Code\n\n**You, the engineer, notice a recurring pattern of code smells while working on a feature.**\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>THE OLD WAY (Human-Only)\u003C/strong>\u003C/summary>\n\nYou might not even notice the deprecated APIs, or if you do, you file it away mentally. \"That's tech debt, we'll deal with it later.\" Maybe you mention it in a standup. Maybe someone creates an epic titled \"Dependency Modernization\" that sits in the backlog for six months.\n\nEventually it becomes a nasty surprise during an upgrade, or it takes a full sprint to plan and execute when product finally prioritizes it.\n\n**Process friction** - but since you couldn't have fixed it quickly anyway, it doesn't feel like a huge loss.\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>TODAY, WITH AGENTS (The Problem)\u003C/strong>\u003C/summary>\n\nYour agent says: \"I've detected three deprecated API calls in this module and four unused dependencies in package.json. I can create PRs to modernize these and remove dead code. This will reduce bundle size by ~40KB and eliminate two console warnings.\"\n\nYou say: \"Do it.\"\n\nThe agent opens four pull requests with tests and detailed descriptions. You review them. They're solid. You'd love to merge them because you know they'll prevent issues down the line.\n\n**But there are no tickets for these changes.**\n\nYou need tickets because all code changes must be associated with work items (audit compliance, capitalization of engineering costs, etc.). You create tickets for each PR.\n\nNow product needs to approve them. \"Tech debt\" isn't scoped for this sprint. These get prioritized for \"Q4 Stability Improvements\" - i.e., maybe never.\n\n**Agile-ICE blocks self-healing.** The work is done. The value is ready to be captured. But the process forbids merging it.\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>THE NEW MODEL (Agentic Tickets)\u003C/strong>\u003C/summary>\n\nThe agent detects the issues, creates Agentic Ticket entries, generates the fixes, and posts PRs. You review and merge them. The codebase improves continuously rather than accumulating tech debt that requires dedicated sprint time.\n\n\u003C/details>\n\n**The insight**: When AI enables continuous code improvement, forcing preventative maintenance into quarterly \"tech debt sprints\" wastes the system's self-healing potential.\n\n## The Trust Requirement\n\nThis requires a different type of trust than traditional Agile, but it's built on the same foundation.\n\nCurrent Agile already depends on trust:\n- Developers estimate tickets in good faith, not padding estimates to look busy\n- Developers don't include out-of-scope changes in their implementations\n- Developers follow what's been delegated to them in JIRA rather than freelancing\n- Product trusts developers to surface blockers and technical concerns honestly\n\nThe Agentic Ticket pattern is an **extension** of this existing trust contract, not a replacement. The difference is speed and scope.\n\nPotential concerns about the \"fast track\":\n- Devs could try to push through unnecessary changes or introduce low-quality code through reduced scrutiny on the AI track\n- The question \"Should this be an AI_CHORE or not?\" could become a new source of friction\n- Product could feel they're losing control of velocity metrics or the overall direction of the product\n\nThese are legitimate concerns. But they're the same concerns that exist in regular Agile, just compressed in time. The safeguards remain: code review, testing, the 1-point limit, and the escalation path when something doesn't fit the fast track.\n\nAdhering to a process that doesn't serve all levels of the totem pole is ultimately doomed. If developers feel that the process prevents them from delivering value, they'll find ways around it - shadow work, off-sprint contributions, or worse, disengagement.\n\nThe Agentic Ticket pattern codifies what should happen: **let the AI try. If it succeeds, great. If it fails, escalate gracefully.**\n\n## The Totem Pole Perceptions\n\nThe whole forest is burning, but everyone's focused on the trees in their backyard.\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Business\u003C/strong>\u003C/summary>\n\nSees a well-oiled machine. Sprints are loaded with tickets, story points are being hit, KPIs are green. They may believe they're leveraging AI effectively because developers have AI coding assistants. What they don't see is how much potential value is trapped behind process gates - the small fixes and improvements that could compound into significant gains if they weren't bottlenecked by sprint planning.\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Product Management\u003C/strong>\u003C/summary>\n\nSees a system that works. They need buffer tickets to manage inevitable scope changes, shifting priorities, and unexpected work. The existing system gives them tools to adjust velocity and swap priorities without breaking commitments to stakeholders. These aren't malicious practices - they're survival mechanisms in an uncertain environment. But they don't see how these same mechanisms create friction with the fast-turnaround potential of AI-driven work.\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Developers\u003C/strong>\u003C/summary>\n\nFeel the friction but don't understand why they're still not getting more work done. They know AI could deliver value now, not in two weeks, and they're frustrated by the process gates. But they often can't articulate why the existing system is broken - they just know it feels slow. Their perspective gets dismissed as \"just wanting to code faster\" rather than recognizing a fundamental shift in what's possible, and they lack the authority to change the process anyway.\n\n\u003C/details>\n\nThe result? Each level has a partial view of the system, but none see how AI has changed the underlying economics of software delivery.\n\n## How Agentic Tickets Restore Alignment Across the Totem Pole\n\nFor this to work, all three stakeholders need to win:\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Business\u003C/strong>\u003C/summary>\n\n- Gets faster ROI on small-value items\n- Reduced operational costs (compare the human efforts involved: investigate + fix in 2 hours vs. investigate + ticket + sprint + implement + review over 2 weeks)\n- Better system stability through faster response to issues\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Product Management\u003C/strong>\u003C/summary>\n\n- Reduced noise in backlog (small issues don't clog up sprint planning)\n- More time to focus on core competencies: planning large features, coordinating stakeholders, unblocking critical issues\n- Clear audit trail remains intact (tickets still exist, PRs still reviewed)\n\n\u003C/details>\n\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Developers\u003C/strong>\u003C/summary>\n\n- Freedom to delegate trivialities to AI while maintaining quality through review\n- Reduced context-switching costs (fix issues while context is hot)\n- Restored sense of agency and responsiveness\n- Elevation of focus to higher-level architectural and strategic problems\n\n\u003C/details>\n\nThe goal is to preserve code quality and organizational oversight while acknowledging a fundamental shift: **when the cost of implementation drops to near-zero for certain types of work** - small bugfixes, refactors, tech debt cleanup - **the cost of process becomes prohibitive**.\n\n## The Industry is Still Adapting\n\nWe're in the early stages of figuring out how to extract maximum value from AI agents. But that they are powerful tools providing real value is indisputable. If you don't believe this, I implore you to try using modern agentic workflows. We're a long way from ChatGPT 3.5, and a lot of AI-negative sentiment seems to be stuck evaluating outdated models as the basis for their opinion. (As a fun aside: any research paper on this subject is obsolete by the time it's published. The pace of capability improvement makes academic publishing cycles look glacial.)\n\nWhat's less clear is how our organizational processes need to evolve to accommodate them.\n\nThe story points system, sprint ceremonies, backlog grooming - all of these were designed for a different era. They're not unneeded, but they are lagging indicators when the bottleneck has shifted from implementation to permission.\n\n**The AI can't adapt to your process.** It can't change your sprint process. It can't override product priorities. It can't merge its own PRs (and shouldn't!). AI operates at machine speed with human judgment - if we let it.\n\nBut *we* can change the process. We can create new patterns that preserve the accountability and auditability of Agile while unlocking the responsiveness that AI enables.\n\n## Long Live SCRUM\n\nThe principles that made Agile powerful remain true:\n- Small batches of work\n- Fast feedback loops\n- Continuous improvement\n- Sustainable pace\n\nAs code becomes increasingly self-improving, process must become self-melting. ICE kept us safe in the human era; now it keeps us slow. The mechanisms need to evolve. Sprint gates made sense when humans were the bottleneck. Now process is the bottleneck.\n\nSCRUM is dead. The SCRUM of 2015, optimized for forecasting human throughput in a pre-AI world.\n\nLong live SCRUM! The SCRUM of 2025 and beyond, optimized for organizational responsiveness in an agentic age.\n\n---\n*Have thoughts on Agentic Tickets or war stories about development in the AI era? I'd love to hear them. Please drop a comment below.*","src/content/blog/scrum-is-dead-long-live-scrum.md","81561a2476398d0c",{"html":246,"metadata":247},"\u003Cstyle>\n/* Hide floating image on mobile, show mobile image */\n@media (max-width: 767px) {\n  .totem-pole-float {\n    display: none !important;\n  }\n  .totem-pole-mobile {\n    display: block !important;\n  }\n}\n\n/* Show floating image on desktop, hide mobile image */\n@media (min-width: 768px) {\n  .totem-pole-float {\n    display: block !important;\n  }\n  .totem-pole-mobile {\n    display: none !important;\n  }\n}\n\u003C/style>\n\u003Cblockquote>\n\u003Cp>Agile for the Agentic Age\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>ICE\u003C/strong> /īs/ \u003Cem>noun\u003C/em>\u003C/p>\n\u003Col>\n\u003Cli>Water frozen into a solid state.\u003C/li>\n\u003Cli>\u003Cem>Slang (Cyberpunk)\u003C/em>: Intrusion Countermeasure Electronics - defensive software designed to kill intruders who attempt unauthorized system access.\u003C/li>\n\u003Cli>\u003Cem>Slang (Software Development)\u003C/em>: Procedural mechanisms that defend organizations against chaos, but also freeze out spontaneous creation and compounding automation gains.\u003C/li>\n\u003C/ol>\n\u003Chr>\n\u003Ch2 id=\"the-original-social-contract-three-axes-of-power\">The Original Social Contract: Three Axes of Power\u003C/h2>\n\u003Cp>To understand why Agile succeeded, you need to understand what each stakeholder gained from it. There are three main axes of power in any engineering organization, and Agile provided value to all of them:\u003C/p>\n\u003Cdiv class=\"totem-pole-float\" style=\"float: right; margin: 0 0 0 1rem; max-width: 400px;\">\n\u003Cp>\u003Cimg src=\"/totemPole.jpg\" alt=\"The Original Social Contract: Three Axes of Power\">\u003C/p>\n\u003C/div>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Business\u003C/strong>\u003C/summary>\n\u003Cp>Gets predictable timelines for delivery and regular updates. This helps them plan expenses, sign contracts, set roadmaps, and hit quarterly targets. Agile gave the business legibility - they could finally see what engineering was doing and when it would be done.\u003C/p>\n\u003C/details>\n\u003Cp>\u003Cstrong>Key gain\u003C/strong>: Metrics and predictability.\u003C/p>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Product Management\u003C/strong>\u003C/summary>\n\u003Cp>Gets a clear way to manage workload and identify when resources can be scaled up or down. Visibility into day-to-day progress helps them understand blockers, track what’s taking longer than expected, and identify impediments before they derail delivery. When Business priorities shift, Product can quickly adjust team velocity and capacity without major restructuring.\u003C/p>\n\u003C/details>\n\u003Cp>\u003Cstrong>Key gain\u003C/strong>: Visibility and control.\u003C/p>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Developers\u003C/strong>\u003C/summary>\n\u003Cp>Gets small, manageable units of work. When done correctly, this drives higher quality and velocity. Product Management breaking down business requirements into epics into stories into tasks makes complexity tractable.\u003C/p>\n\u003C/details>\n\u003Cp>\u003Cstrong>Key gain\u003C/strong>: Well-scoped and clearly defined work.\u003C/p>\n\u003Cdiv class=\"totem-pole-mobile\" style=\"display: none; text-align: center; margin: 2rem 0;\">\n\u003Cimg src=\"/totemPole.jpg\" alt=\"The Original Social Contract: Three Axes of Power\" style=\"max-width: 100%; max-height: 400px; height: auto; margin: 0 auto;\">\n\u003C/div>\n\u003Cp>The genius of Agile was that it created a system where everyone got something valuable. But as Agile matured and spread across the industry, something changed.\u003C/p>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>What changed?\u003C/strong>\u003C/summary>\n\u003Cp>The tragedy of Agile is what happened next: \u003Cstrong>it redistributed control upward\u003C/strong>.\u003C/p>\n\u003Cp>The balance of power shifted from passionate engineers solving problems to bean counters measuring velocity. Agile fell into a predictable rut: marathon ceremonies where product managers read ticket descriptions that could have been shared asynchronously, while developers sit through hours of planning for just a few minutes of actual estimation. Story point poker where there’s no accountability for implementation time diverging from the estimate. Retrospectives where the same action items appear sprint after sprint, dutifully recorded and promptly forgotten. Sprint planning became sprint approval. Story points became developer surveillance. The ticketing system became an audit trail first and a workflow tool second!\u003C/p>\n\u003C/details>\n\u003Cp>The dynamic, responsive methodology that promised to free developers from waterfall’s rigidity became its own kind of straitjacket- but with better metrics!\u003C/p>\n\u003Cdiv style=\"clear: both;\">\u003C/div>\n\u003Cp>And in a pre-AI era, this was all tolerable. The endless meetings were annoying, but the work still had to be done by a human, and humans are slow. The overhead of process felt proportional to the cost of human labor.\u003C/p>\n\u003Cp>\u003Cstrong>AI redistributes capability downward, and has no regard for the rules of Agile.\u003C/strong> What each level of the totem pole should expect from the sprint process needs to evolve accordingly.\u003C/p>\n\u003Ch2 id=\"scrum-is-dead\">SCRUM is dead\u003C/h2>\n\u003Cp>Agile assumes a closed system with predictable throughput. Real engineering is an open system with stochastic workloads: production incidents, unexpected bugs, emergent technical debt, and now - most importantly - work that AI can complete in minutes rather than days.\u003C/p>\n\u003Cp>Consider the “drag” that plagues most modern Agile teams:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Unexpected production issues\u003C/strong> need fixing NOW, but weren’t in the sprint\u003C/li>\n\u003Cli>\u003Cstrong>Developer environment issues\u003C/strong> grind productivity to a halt\u003C/li>\n\u003Cli>\u003Cstrong>Business priorities\u003C/strong> shift mid-sprint (orders from on high!)\u003C/li>\n\u003Cli>\u003Cstrong>Emergent technical debt\u003C/strong> gets discovered during feature work\u003C/li>\n\u003C/ul>\n\u003Cp>Most teams handle this in one of a few ways:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Always take X-Y points\u003C/strong> in a sprint (where Y is a pessimistic buffer for unexpected work)\u003C/li>\n\u003Cli>\u003Cstrong>Pad the sprint\u003C/strong> with low-priority busywork that can be dropped when urgent issues arise\u003C/li>\n\u003Cli>\u003Cstrong>Bury their head in the sand\u003C/strong> and pretend that any time a sprint isn’t completed, there was nothing that could have been done to avoid it\u003C/li>\n\u003C/ol>\n\u003Cp>These approaches assume humans are the constraint, where the bottleneck is implementation time, not decision latency.\u003C/p>\n\u003Cp>When an AI can go from “investigate this bug” to “pull request ready for review” in less time than it takes to jack in and locate the construct, the constraint isn’t development time anymore. \u003Cstrong>The constraint is permission.\u003C/strong>\u003C/p>\n\u003Cp>The sprint process becomes Agile-ICE - not the protective kind that defends against chaos, but the deadly kind designed to kill unauthorized access. Like the ICE in Neuromancer, it doesn’t distinguish between a malicious intruder and a legitimate user moving too fast. It just blocks. The lever to deactivate this ICE lies solely with the Scrum Master - usually product management.\u003C/p>\n\u003Cp>\u003Cstrong>SCRUM isn’t bad - it’s just obsolete.\u003C/strong>\u003C/p>\n\u003Cp>The framework that revolutionized software development in the 2000s and 2010s is now the thing holding back the next revolution. It’s not that the principles are wrong - transparency, inspection, and adaptation remain crucial. It’s that the specific mechanics are optimized for the wrong constraint.\u003C/p>\n\u003Cp>In an agentic world, the bottleneck isn’t implementation speed. It’s decision latency. It’s permission gates. It’s process friction that freezes out the exponential gains AI promises.\u003C/p>\n\u003Cp>The question isn’t whether SCRUM will survive - it’s whether your organization will survive the transition to an agentic world.\u003C/p>\n\u003Ch2 id=\"the-solution-agentic-tickets\">The Solution: Agentic Tickets\u003C/h2>\n\u003Cp>So how do we thaw the ice without melting into chaos?\u003C/p>\n\u003Cp>Create a \u003Cstrong>separate track for AI-driven work\u003C/strong> where the AI (with human approval) can create tickets and immediately attempt to solve them.\u003C/p>\n\u003Cp>I’m calling these \u003Cstrong>Agentic Tickets\u003C/strong> (or \u003Ccode>AI_CHORE\u003C/code> in JIRA parlance, if you want to be literal).\u003C/p>\n\u003Ch3 id=\"proposal-formalize-the-agentic-ticket-pattern\">Proposal: Formalize the Agentic Ticket Pattern\u003C/h3>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Eligibility Criteria:\u003C/strong>\u003C/summary>\n\u003Cul>\n\u003Cli>\u003Cstrong>≤1 story point\u003C/strong> (strictly timeboxed)\u003C/li>\n\u003Cli>\u003Cstrong>Clearly scoped\u003C/strong> (well-defined problem and success criteria)\u003C/li>\n\u003Cli>\u003Cstrong>Low blast radius\u003C/strong> (reversible, doesn’t touch critical paths)\u003C/li>\n\u003Cli>\u003Cstrong>Sufficient detail and ease of review\u003C/strong> for an AI agent to implement autonomously\u003C/li>\n\u003C/ul>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Lifecycle:\u003C/strong>\u003C/summary>\n\u003Col>\n\u003Cli>\n\u003Cp>Ticket is created (by AI or human+AI)\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>AI immediately begins work (no sprint planning gate)\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>AI posts pull request with tests and description\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Human reviews (this is critical - never skip this!)\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Success\u003C/strong>: PR is approved and merged, human marks ticket as done\u003C/p>\n\u003Cp>\u003Cstrong>Failure\u003C/strong>: PR fails review, ticket converts to standard issue type and follows normal sprint process\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/details>\n\u003Cp>\u003Cstrong>Key Rules:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Not subject to sprint injection rules\u003C/strong> (removes friction for small, valuable work)\u003C/li>\n\u003Cli>\u003Cstrong>Maximum 1 point\u003C/strong> (prevents abuse)\u003C/li>\n\u003Cli>\u003Cstrong>Strict timeboxing\u003C/strong> (if it’s not done in hours, escalate it)\u003C/li>\n\u003Cli>\u003Cstrong>Metrics shift from story points to time-to-resolution\u003C/strong> (measure responsiveness, not forecasting)\u003C/li>\n\u003C/ul>\n\u003Cp>Here are three scenarios that illustrate how Agile-ICE blocks value delivery in the agentic era.\u003C/p>\n\u003Ch2 id=\"scenario-1-reactive-debugging---the-ops-to-fix-pipeline\">Scenario 1: Reactive Debugging - The Ops-to-Fix Pipeline\u003C/h2>\n\u003Cp>\u003Cstrong>You, the engineer on call, are instructed to debug a Datadog error in your production application.\u003C/strong>\u003C/p>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>THE OLD WAY (Human-Only)\u003C/strong>\u003C/summary>\n\u003Cp>You investigate the issue. Open Datadog, trace through logs, check recent commits, maybe reproduce it locally. If the fix is obvious, you slap together a JIRA ticket and throw it in the backlog. It’ll get done someday, hopefully with enough detail that there’s no drag when someone picks it up weeks later.\u003C/p>\n\u003Cp>If the fix isn’t obvious, you spend significantly longer trying to gain clarity before creating the ticket.\u003C/p>\n\u003Cp>Either way, the fix happens in 2+ weeks, not 2 hours.\u003C/p>\n\u003Cp>\u003Cstrong>Process friction\u003C/strong> - but at least the investigation took long enough that the process delay felt proportional.\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>TODAY, WITH AGENTS (The Problem)\u003C/strong>\u003C/summary>\n\u003Cp>You click the “open in Cursor” button in Datadog and ask your agent to help investigate. The agent analyzes the stack trace, reviews recent commits, checks logs, and provides context:\u003C/p>\n\u003Cp>“This is a null pointer exception caused by a race condition in the payment processing queue. The issue was introduced in commit abc123f when we refactored the retry logic. Here’s a proposed fix with tests.”\u003C/p>\n\u003Cp>You review it. Looks good. You ask the agent to create a JIRA ticket with all the relevant details.\u003C/p>\n\u003Cp>\u003Cstrong>AND HERE AGILE-ICE STOPS YOU COLD.\u003C/strong>\u003C/p>\n\u003Cp>The ticket is created. It’s in the backlog. Product will prioritize it in the next sprint planning session - two weeks from now. Maybe it gets picked up by you, maybe by someone else who’ll need to rebuild context. The pull request that would take the AI a few minutes to generate will take 2-3 weeks to merge.\u003C/p>\n\u003Cp>The investigation now takes minutes, but the fix still takes weeks. The process latency that was once proportional to human effort is now the dominant cost.\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>THE NEW MODEL (Agentic Tickets)\u003C/strong>\u003C/summary>\n\u003Cp>You click the “open in Cursor” button in Datadog and ask your agent to help investigate. The agent analyzes the stack trace, reviews recent commits, checks logs, and provides context:\u003C/p>\n\u003Cp>“This is a null pointer exception caused by a race condition in the payment processing queue. The issue was introduced in commit abc123f when we refactored the retry logic. Here’s a proposed fix with tests.”\u003C/p>\n\u003Cp>You review it. Looks good. You ask the agent to create an Agentic Ticket and immediately start working on it. The agent creates the ticket, generates the fix, and posts a pull request. Your coworker reviews it, tests pass, and you merge it.\u003C/p>\n\u003Cp>You’ve solved the issue end-to-end before the Agile-ICE could even activate. The investigation, fix, review, and merge happen faster than the old process could even categorize and prioritize the work.\u003C/p>\n\u003C/details>\n\u003Cp>\u003Cstrong>The insight\u003C/strong>: Process latency is now more expensive than implementation time.\u003C/p>\n\u003Ch2 id=\"scenario-2-feature-cleanup---ticket-overlap-collision\">Scenario 2: Feature Cleanup - Ticket Overlap Collision\u003C/h2>\n\u003Cp>\u003Cstrong>You, the engineer, are informed that there are issues with a recently developed feature. Product has created three tickets detailing problems that require attention.\u003C/strong>\u003C/p>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>THE OLD WAY (Human-Only)\u003C/strong>\u003C/summary>\n\u003Cp>You read the three tickets and start working. As you dig in, you realize there’s overlap - two tickets are addressing symptoms of the same root cause. You also discover two additional edge cases that weren’t in the original tickets.\u003C/p>\n\u003Cp>This triggers the familiar cascade of questions:\u003C/p>\n\u003Cul>\n\u003Cli>Should the tickets be combined? Do I need to make a case to product, or can I just combine them myself?\u003C/li>\n\u003Cli>If they stay separate, will I encounter merge conflicts later?\u003C/li>\n\u003Cli>For the new issues I discovered: do I fold them into existing changes (BAD - teammates will hate you) or create new tickets (YES - small changes are happy changes)?\u003C/li>\n\u003C/ul>\n\u003Cp>You create two new tickets for the edge cases and throw them in the backlog. Those new tickets get scheduled for the next sprint. You’ll grind away at them 2+ weeks from now when your context has evaporated. Since humans are slow, the 2-week delay doesn’t feel like the main bottleneck.\u003C/p>\n\u003Cp>\u003Cstrong>Process friction\u003C/strong> - but since implementation takes days anyway, the delay is tolerable.\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>TODAY, WITH AGENTS (The Problem)\u003C/strong>\u003C/summary>\n\u003Cp>The same scenario plays out, but now AI could cut through this ambiguity \u003Ca href=\"https://en.wikipedia.org/wiki/Gordian_Knot\">like Alexander cutting the Gordian Knot\u003C/a> - instantly analyzing the overlap, generating fixes for all related issues, and posting clean PRs in 20 minutes.\u003C/p>\n\u003Cp>But you still have to follow the sprint process. You create the tickets, they go into the backlog, and you wait for product approval. The AI that could have solved everything while context is hot now sits idle for two weeks.\u003C/p>\n\u003Cp>\u003Cstrong>Agile-ICE removes most of the value\u003C/strong> - the tiny fixes that could be done immediately get frozen by process designed for week-long human implementation cycles.\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>THE NEW MODEL (Agentic Tickets)\u003C/strong>\u003C/summary>\n\u003Cp>You discover the edge cases, create Agentic Ticket entries for them, and let the AI handle them immediately. Twenty minutes later, you have PRs ready for review. You merge them while the context is still hot, before anyone forgets why these edge cases matter.\u003C/p>\n\u003C/details>\n\u003Cp>\u003Cstrong>The insight\u003C/strong>: When AI can resolve ticket ambiguity and implementation in minutes, waiting weeks for sprint planning approval becomes the dominant cost.\u003C/p>\n\u003Ch2 id=\"scenario-3-proactive-refactoring---self-healing-code\">Scenario 3: Proactive Refactoring - Self-Healing Code\u003C/h2>\n\u003Cp>\u003Cstrong>You, the engineer, notice a recurring pattern of code smells while working on a feature.\u003C/strong>\u003C/p>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>THE OLD WAY (Human-Only)\u003C/strong>\u003C/summary>\n\u003Cp>You might not even notice the deprecated APIs, or if you do, you file it away mentally. “That’s tech debt, we’ll deal with it later.” Maybe you mention it in a standup. Maybe someone creates an epic titled “Dependency Modernization” that sits in the backlog for six months.\u003C/p>\n\u003Cp>Eventually it becomes a nasty surprise during an upgrade, or it takes a full sprint to plan and execute when product finally prioritizes it.\u003C/p>\n\u003Cp>\u003Cstrong>Process friction\u003C/strong> - but since you couldn’t have fixed it quickly anyway, it doesn’t feel like a huge loss.\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>TODAY, WITH AGENTS (The Problem)\u003C/strong>\u003C/summary>\n\u003Cp>Your agent says: “I’ve detected three deprecated API calls in this module and four unused dependencies in package.json. I can create PRs to modernize these and remove dead code. This will reduce bundle size by ~40KB and eliminate two console warnings.”\u003C/p>\n\u003Cp>You say: “Do it.”\u003C/p>\n\u003Cp>The agent opens four pull requests with tests and detailed descriptions. You review them. They’re solid. You’d love to merge them because you know they’ll prevent issues down the line.\u003C/p>\n\u003Cp>\u003Cstrong>But there are no tickets for these changes.\u003C/strong>\u003C/p>\n\u003Cp>You need tickets because all code changes must be associated with work items (audit compliance, capitalization of engineering costs, etc.). You create tickets for each PR.\u003C/p>\n\u003Cp>Now product needs to approve them. “Tech debt” isn’t scoped for this sprint. These get prioritized for “Q4 Stability Improvements” - i.e., maybe never.\u003C/p>\n\u003Cp>\u003Cstrong>Agile-ICE blocks self-healing.\u003C/strong> The work is done. The value is ready to be captured. But the process forbids merging it.\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>THE NEW MODEL (Agentic Tickets)\u003C/strong>\u003C/summary>\n\u003Cp>The agent detects the issues, creates Agentic Ticket entries, generates the fixes, and posts PRs. You review and merge them. The codebase improves continuously rather than accumulating tech debt that requires dedicated sprint time.\u003C/p>\n\u003C/details>\n\u003Cp>\u003Cstrong>The insight\u003C/strong>: When AI enables continuous code improvement, forcing preventative maintenance into quarterly “tech debt sprints” wastes the system’s self-healing potential.\u003C/p>\n\u003Ch2 id=\"the-trust-requirement\">The Trust Requirement\u003C/h2>\n\u003Cp>This requires a different type of trust than traditional Agile, but it’s built on the same foundation.\u003C/p>\n\u003Cp>Current Agile already depends on trust:\u003C/p>\n\u003Cul>\n\u003Cli>Developers estimate tickets in good faith, not padding estimates to look busy\u003C/li>\n\u003Cli>Developers don’t include out-of-scope changes in their implementations\u003C/li>\n\u003Cli>Developers follow what’s been delegated to them in JIRA rather than freelancing\u003C/li>\n\u003Cli>Product trusts developers to surface blockers and technical concerns honestly\u003C/li>\n\u003C/ul>\n\u003Cp>The Agentic Ticket pattern is an \u003Cstrong>extension\u003C/strong> of this existing trust contract, not a replacement. The difference is speed and scope.\u003C/p>\n\u003Cp>Potential concerns about the “fast track”:\u003C/p>\n\u003Cul>\n\u003Cli>Devs could try to push through unnecessary changes or introduce low-quality code through reduced scrutiny on the AI track\u003C/li>\n\u003Cli>The question “Should this be an AI_CHORE or not?” could become a new source of friction\u003C/li>\n\u003Cli>Product could feel they’re losing control of velocity metrics or the overall direction of the product\u003C/li>\n\u003C/ul>\n\u003Cp>These are legitimate concerns. But they’re the same concerns that exist in regular Agile, just compressed in time. The safeguards remain: code review, testing, the 1-point limit, and the escalation path when something doesn’t fit the fast track.\u003C/p>\n\u003Cp>Adhering to a process that doesn’t serve all levels of the totem pole is ultimately doomed. If developers feel that the process prevents them from delivering value, they’ll find ways around it - shadow work, off-sprint contributions, or worse, disengagement.\u003C/p>\n\u003Cp>The Agentic Ticket pattern codifies what should happen: \u003Cstrong>let the AI try. If it succeeds, great. If it fails, escalate gracefully.\u003C/strong>\u003C/p>\n\u003Ch2 id=\"the-totem-pole-perceptions\">The Totem Pole Perceptions\u003C/h2>\n\u003Cp>The whole forest is burning, but everyone’s focused on the trees in their backyard.\u003C/p>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Business\u003C/strong>\u003C/summary>\n\u003Cp>Sees a well-oiled machine. Sprints are loaded with tickets, story points are being hit, KPIs are green. They may believe they’re leveraging AI effectively because developers have AI coding assistants. What they don’t see is how much potential value is trapped behind process gates - the small fixes and improvements that could compound into significant gains if they weren’t bottlenecked by sprint planning.\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Product Management\u003C/strong>\u003C/summary>\n\u003Cp>Sees a system that works. They need buffer tickets to manage inevitable scope changes, shifting priorities, and unexpected work. The existing system gives them tools to adjust velocity and swap priorities without breaking commitments to stakeholders. These aren’t malicious practices - they’re survival mechanisms in an uncertain environment. But they don’t see how these same mechanisms create friction with the fast-turnaround potential of AI-driven work.\u003C/p>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Developers\u003C/strong>\u003C/summary>\n\u003Cp>Feel the friction but don’t understand why they’re still not getting more work done. They know AI could deliver value now, not in two weeks, and they’re frustrated by the process gates. But they often can’t articulate why the existing system is broken - they just know it feels slow. Their perspective gets dismissed as “just wanting to code faster” rather than recognizing a fundamental shift in what’s possible, and they lack the authority to change the process anyway.\u003C/p>\n\u003C/details>\n\u003Cp>The result? Each level has a partial view of the system, but none see how AI has changed the underlying economics of software delivery.\u003C/p>\n\u003Ch2 id=\"how-agentic-tickets-restore-alignment-across-the-totem-pole\">How Agentic Tickets Restore Alignment Across the Totem Pole\u003C/h2>\n\u003Cp>For this to work, all three stakeholders need to win:\u003C/p>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Business\u003C/strong>\u003C/summary>\n\u003Cul>\n\u003Cli>Gets faster ROI on small-value items\u003C/li>\n\u003Cli>Reduced operational costs (compare the human efforts involved: investigate + fix in 2 hours vs. investigate + ticket + sprint + implement + review over 2 weeks)\u003C/li>\n\u003Cli>Better system stability through faster response to issues\u003C/li>\n\u003C/ul>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Product Management\u003C/strong>\u003C/summary>\n\u003Cul>\n\u003Cli>Reduced noise in backlog (small issues don’t clog up sprint planning)\u003C/li>\n\u003Cli>More time to focus on core competencies: planning large features, coordinating stakeholders, unblocking critical issues\u003C/li>\n\u003Cli>Clear audit trail remains intact (tickets still exist, PRs still reviewed)\u003C/li>\n\u003C/ul>\n\u003C/details>\n\u003Cdetails>\n\u003Csummary>\u003Cstrong>Developers\u003C/strong>\u003C/summary>\n\u003Cul>\n\u003Cli>Freedom to delegate trivialities to AI while maintaining quality through review\u003C/li>\n\u003Cli>Reduced context-switching costs (fix issues while context is hot)\u003C/li>\n\u003Cli>Restored sense of agency and responsiveness\u003C/li>\n\u003Cli>Elevation of focus to higher-level architectural and strategic problems\u003C/li>\n\u003C/ul>\n\u003C/details>\n\u003Cp>The goal is to preserve code quality and organizational oversight while acknowledging a fundamental shift: \u003Cstrong>when the cost of implementation drops to near-zero for certain types of work\u003C/strong> - small bugfixes, refactors, tech debt cleanup - \u003Cstrong>the cost of process becomes prohibitive\u003C/strong>.\u003C/p>\n\u003Ch2 id=\"the-industry-is-still-adapting\">The Industry is Still Adapting\u003C/h2>\n\u003Cp>We’re in the early stages of figuring out how to extract maximum value from AI agents. But that they are powerful tools providing real value is indisputable. If you don’t believe this, I implore you to try using modern agentic workflows. We’re a long way from ChatGPT 3.5, and a lot of AI-negative sentiment seems to be stuck evaluating outdated models as the basis for their opinion. (As a fun aside: any research paper on this subject is obsolete by the time it’s published. The pace of capability improvement makes academic publishing cycles look glacial.)\u003C/p>\n\u003Cp>What’s less clear is how our organizational processes need to evolve to accommodate them.\u003C/p>\n\u003Cp>The story points system, sprint ceremonies, backlog grooming - all of these were designed for a different era. They’re not unneeded, but they are lagging indicators when the bottleneck has shifted from implementation to permission.\u003C/p>\n\u003Cp>\u003Cstrong>The AI can’t adapt to your process.\u003C/strong> It can’t change your sprint process. It can’t override product priorities. It can’t merge its own PRs (and shouldn’t!). AI operates at machine speed with human judgment - if we let it.\u003C/p>\n\u003Cp>But \u003Cem>we\u003C/em> can change the process. We can create new patterns that preserve the accountability and auditability of Agile while unlocking the responsiveness that AI enables.\u003C/p>\n\u003Ch2 id=\"long-live-scrum\">Long Live SCRUM\u003C/h2>\n\u003Cp>The principles that made Agile powerful remain true:\u003C/p>\n\u003Cul>\n\u003Cli>Small batches of work\u003C/li>\n\u003Cli>Fast feedback loops\u003C/li>\n\u003Cli>Continuous improvement\u003C/li>\n\u003Cli>Sustainable pace\u003C/li>\n\u003C/ul>\n\u003Cp>As code becomes increasingly self-improving, process must become self-melting. ICE kept us safe in the human era; now it keeps us slow. The mechanisms need to evolve. Sprint gates made sense when humans were the bottleneck. Now process is the bottleneck.\u003C/p>\n\u003Cp>SCRUM is dead. The SCRUM of 2015, optimized for forecasting human throughput in a pre-AI world.\u003C/p>\n\u003Cp>Long live SCRUM! The SCRUM of 2025 and beyond, optimized for organizational responsiveness in an agentic age.\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cem>Have thoughts on Agentic Tickets or war stories about development in the AI era? I’d love to hear them. Please drop a comment below.\u003C/em>\u003C/p>",{"headings":248,"localImagePaths":285,"remoteImagePaths":286,"frontmatter":287,"imagePaths":290},[249,252,255,258,261,264,267,270,273,276,279,282],{"depth":30,"slug":250,"text":251},"the-original-social-contract-three-axes-of-power","The Original Social Contract: Three Axes of Power",{"depth":30,"slug":253,"text":254},"scrum-is-dead","SCRUM is dead",{"depth":30,"slug":256,"text":257},"the-solution-agentic-tickets","The Solution: Agentic Tickets",{"depth":40,"slug":259,"text":260},"proposal-formalize-the-agentic-ticket-pattern","Proposal: Formalize the Agentic Ticket Pattern",{"depth":30,"slug":262,"text":263},"scenario-1-reactive-debugging---the-ops-to-fix-pipeline","Scenario 1: Reactive Debugging - The Ops-to-Fix Pipeline",{"depth":30,"slug":265,"text":266},"scenario-2-feature-cleanup---ticket-overlap-collision","Scenario 2: Feature Cleanup - Ticket Overlap Collision",{"depth":30,"slug":268,"text":269},"scenario-3-proactive-refactoring---self-healing-code","Scenario 3: Proactive Refactoring - Self-Healing Code",{"depth":30,"slug":271,"text":272},"the-trust-requirement","The Trust Requirement",{"depth":30,"slug":274,"text":275},"the-totem-pole-perceptions","The Totem Pole Perceptions",{"depth":30,"slug":277,"text":278},"how-agentic-tickets-restore-alignment-across-the-totem-pole","How Agentic Tickets Restore Alignment Across the Totem Pole",{"depth":30,"slug":280,"text":281},"the-industry-is-still-adapting","The Industry is Still Adapting",{"depth":30,"slug":283,"text":284},"long-live-scrum","Long Live SCRUM",[],[],{"title":233,"description":234,"pubDate":288,"tags":289},["Date","2025-10-28T00:00:00.000Z"],[237,238,239,240,241],[],"scrum-is-dead-long-live-scrum.md"]