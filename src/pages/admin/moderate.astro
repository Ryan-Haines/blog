---
/**
 * Comment Moderation Admin Page
 * Protected by ADMIN_KEY - access via /admin/moderate?key=YOUR_ADMIN_KEY
 * 
 * Note: Key verification happens in the API actions (runtime),
 * not here (build time), so the page loads but won't work without a valid key.
 */
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Comment Moderation</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      background: #f5f5f5;
      padding: 20px;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
    }

    header {
      background: white;
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 20px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    h1 {
      font-size: 24px;
      color: #333;
      margin-bottom: 10px;
    }

    .stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      margin-bottom: 20px;
    }

    .stat-card {
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .stat-card h3 {
      font-size: 14px;
      color: #666;
      margin-bottom: 8px;
    }

    .stat-card .number {
      font-size: 32px;
      font-weight: bold;
      color: #333;
    }

    .filters {
      background: white;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 20px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .filters button {
      padding: 8px 16px;
      margin-right: 10px;
      border: 2px solid #ddd;
      background: white;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
    }

    .filters button.active {
      background: #2563eb;
      color: white;
      border-color: #2563eb;
    }

    .comments-list {
      background: #f5f5f5;
      border-radius: 8px;
      padding: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .comment {
      padding: 24px;
      background: white;
      margin-bottom: 20px;
      border: 3px solid #9ca3af;
      border-radius: 12px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      transition: all 0.2s;
    }

    .comment:last-child {
      margin-bottom: 0;
    }

    .comment:hover {
      background: #fffbeb;
      border-color: #2563eb;
      box-shadow: 0 8px 12px rgba(37, 99, 235, 0.2);
      transform: translateY(-4px);
    }

    .comment-header {
      margin-bottom: 12px;
    }

    .comment-author {
      font-weight: bold;
      color: #333;
      font-size: 16px;
    }

    .comment-info {
      font-size: 12px;
      color: #666;
      margin-top: 6px;
    }

    .comment-content {
      margin: 16px 0 20px 0;
      color: #1f2937;
      white-space: pre-wrap;
      line-height: 1.6;
      font-size: 15px;
      padding: 20px;
      background: #f9fafb;
      border-radius: 8px;
      border: 2px solid #e5e7eb;
      border-left: 5px solid #6b7280;
    }

    .comment-actions {
      display: flex;
      gap: 8px;
      padding-top: 16px;
      margin-top: 16px;
      border-top: 2px solid #e5e7eb;
    }

    .comment-actions button {
      padding: 8px 16px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 13px;
      font-weight: 500;
      transition: all 0.2s;
    }

    .comment-actions button:hover {
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .btn-approve {
      background: #10b981;
      color: white;
    }

    .btn-approve:hover {
      background: #059669;
    }

    .btn-reject {
      background: #f59e0b;
      color: white;
    }

    .btn-reject:hover {
      background: #d97706;
    }

    .btn-delete {
      background: #ef4444;
      color: white;
    }

    .btn-delete:hover {
      background: #dc2626;
    }

    .status-badge {
      display: inline-block;
      padding: 4px 10px;
      border-radius: 12px;
      font-size: 12px;
      font-weight: 600;
    }

    .status-approved {
      background: #d1fae5;
      color: #065f46;
    }

    .status-pending {
      background: #fef3c7;
      color: #92400e;
    }

    .status-spam {
      background: #fee2e2;
      color: #991b1b;
    }

    .empty {
      text-align: center;
      padding: 40px;
      color: #999;
    }

    .loading {
      text-align: center;
      padding: 40px;
      color: #666;
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>üõ°Ô∏è Comment Moderation</h1>
      <p>Manage and moderate blog comments</p>
    </header>

    <div class="stats" id="stats">
      <div class="stat-card">
        <h3>Total Comments</h3>
        <div class="number" id="stat-total">-</div>
      </div>
      <div class="stat-card">
        <h3>‚úÖ Approved</h3>
        <div class="number" id="stat-approved">-</div>
      </div>
      <div class="stat-card">
        <h3>‚è≥ Pending</h3>
        <div class="number" id="stat-pending">-</div>
      </div>
      <div class="stat-card">
        <h3>üö´ Spam</h3>
        <div class="number" id="stat-spam">-</div>
      </div>
      <div class="stat-card">
        <h3>‚ù§Ô∏è Total Likes</h3>
        <div class="number" id="stat-likes">-</div>
      </div>
    </div>

    <div class="filters">
      <button class="active" onclick="filterComments('all')">All</button>
      <button onclick="filterComments('pending')">Pending</button>
      <button onclick="filterComments('approved')">Approved</button>
      <button onclick="filterComments('spam')">Spam</button>
    </div>

    <div class="comments-list" id="comments-list">
      <div class="loading">Loading comments...</div>
    </div>
  </div>

  <script>
    import { actions } from 'astro:actions';

    // Get admin key from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const adminKey = urlParams.get('key');

    if (!adminKey) {
      document.body.innerHTML = '<div style="text-align:center;padding:50px;font-family:sans-serif;"><h1>‚ùå Unauthorized</h1><p>Admin key required. Access this page with: <code>/admin/moderate?key=YOUR_ADMIN_KEY</code></p></div>';
      throw new Error('Admin key required');
    }

    let currentFilter = 'all';
    let allComments = [];

    // Load stats
    async function loadStats() {
      try {
        console.log('Loading stats with admin key:', adminKey.substring(0, 10) + '...');
        
        const result = await actions.adminGetStats({ adminKey });
        console.log('Stats result from actions API:', result);
        
        // Handle Astro actions response format
        let data;
        if (result.error) {
          console.error('Stats error:', result.error);
          if (result.error.message === 'Unauthorized') {
            document.body.innerHTML = '<div style="text-align:center;padding:50px;font-family:sans-serif;"><h1>‚ùå Unauthorized</h1><p>Invalid admin key. Check your <code>.dev.vars</code> file or Cloudflare environment variables.</p></div>';
            return;
          }
          throw new Error(result.error.message);
        } else if (result.data) {
          // Standard format
          data = result.data;
        } else if (Array.isArray(result) && result.length >= 2) {
          // Array format (Astro v5 actions format)
          // result[0] contains top-level data, result[1] contains nested comments object
          data = {
            comments: result[1] || {},
            likes: result[0]?.likes || 0
          };
        } else if (Array.isArray(result) && result.length > 0) {
          // Fallback single array item
          data = result[0];
        } else {
          // Direct format
          data = result;
        }
        
        console.log('Parsed data:', data);
        
        if (data && data.comments) {
          console.log('Updating stats display with data:', data);
          const comments = data.comments;
          document.getElementById('stat-total').textContent = comments.total || 0;
          document.getElementById('stat-approved').textContent = comments.approved || 0;
          document.getElementById('stat-pending').textContent = comments.pending || 0;
          document.getElementById('stat-spam').textContent = comments.spam || 0;
          document.getElementById('stat-likes').textContent = data.likes || 0;
        } else {
          console.warn('No data in stats result, raw result:', result);
          console.warn('Parsed data:', data);
        }
      } catch (err) {
        console.error('Failed to load stats:', err);
        document.getElementById('stats').innerHTML = '<div style="padding:20px;color:red;">Error loading stats: ' + err.message + '</div>';
      }
    }

    // Load comments
    async function loadComments(status = 'all') {
      try {
        console.log('Loading comments with status:', status);
        
        const result = await actions.adminGetAllComments({ adminKey, status, limit: 100 });
        console.log('Comments result from actions API:', result);
        
        // Handle different response formats
        let data;
        if (result.error) {
          console.error('Comments error:', result.error);
          throw new Error(result.error.message || 'Failed to load comments');
        } else if (result.data) {
          data = result.data;
        } else if (Array.isArray(result) && result.length > 0) {
          // Array format from Astro v5
          data = result[0];
        } else {
          data = result;
        }
        
        console.log('Parsed comments data:', data);
        
        // Ensure we always get an array
        if (data && Array.isArray(data.comments)) {
          // Standard format: { comments: [...], count: N }
          allComments = data.comments;
        } else if (Array.isArray(data)) {
          // Direct array
          allComments = data;
        } else if (data && data.results && Array.isArray(data.results)) {
          // D1 returns results in a .results property
          allComments = data.results;
        } else {
          console.warn('Unexpected data format:', typeof data, data);
          allComments = [];
        }
        
        console.log('Loaded comments:', allComments.length, allComments);
        renderComments();
      } catch (err) {
        console.error('Failed to load comments:', err);
        document.getElementById('comments-list').innerHTML = '<div class="empty">Failed to load comments: ' + err.message + '</div>';
      }
    }

    // Render comments
    function renderComments() {
      const container = document.getElementById('comments-list');
      
      // Safety check
      if (!Array.isArray(allComments)) {
        console.error('allComments is not an array:', allComments);
        container.innerHTML = '<div class="empty">Error: Invalid comments data format</div>';
        return;
      }
      
      if (allComments.length === 0) {
        container.innerHTML = '<div class="empty">No comments found</div>';
        return;
      }

      const statusLabels = { 1: 'Approved', 0: 'Pending', '-1': 'Spam' };
      const statusClasses = { 1: 'status-approved', 0: 'status-pending', '-1': 'status-spam' };

      container.innerHTML = allComments.map((comment, index) => `
        ${index > 0 ? '<hr style="border: none; border-top: 5px solid #000; margin: 30px 0;">' : ''}
        <div class="comment" style="background: white; padding: 24px; border: 3px solid #000; border-radius: 8px; margin: 20px 0;">
          <div class="comment-header">
            <div class="comment-author" style="font-size: 18px; font-weight: bold; margin-bottom: 8px;">${escapeHtml(comment.author_name)}</div>
            <div class="comment-info" style="font-size: 13px; color: #666; margin-bottom: 16px;">
              <span class="status-badge ${statusClasses[comment.approved]}">
                ${statusLabels[comment.approved]}
              </span>
              ‚Ä¢ Post: ${escapeHtml(comment.post_slug)}
              ‚Ä¢ ${new Date(comment.created_at).toLocaleString()}
              ‚Ä¢ IP: ${comment.ip_address}
            </div>
          </div>
          <hr style="border: none; border-top: 2px solid #ccc; margin: 16px 0;">
          <div class="comment-content" style="padding: 20px; background: #f5f5f5; border: 2px solid #ddd; border-radius: 6px; margin: 16px 0;">${escapeHtml(comment.content)}</div>
          <hr style="border: none; border-top: 2px solid #ccc; margin: 16px 0;">
          <div class="comment-actions" style="display: flex; gap: 10px;">
            ${comment.approved !== 1 ? `<button class="btn-approve" onclick="updateComment(${comment.id}, 'approve')" style="padding: 10px 16px; background: #10b981; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: bold;">‚úì Approve</button>` : ''}
            ${comment.approved !== -1 ? `<button class="btn-reject" onclick="updateComment(${comment.id}, 'reject')" style="padding: 10px 16px; background: #f59e0b; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: bold;">üö´ Mark as Spam</button>` : ''}
            <button class="btn-delete" onclick="deleteComment(${comment.id})" style="padding: 10px 16px; background: #ef4444; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: bold;">üóëÔ∏è Delete</button>
          </div>
        </div>
      `).join('');
    }

    // Update comment
    async function updateComment(commentId, action) {
      if (action === 'delete' && !confirm('Are you sure you want to delete this comment?')) {
        return;
      }

      try {
        const result = await actions.adminUpdateComment({ adminKey, commentId, action });
        console.log('Update result:', result);
        
        if (result.data?.success || !result.error) {
          await loadComments(currentFilter);
          await loadStats();
        } else {
          alert('Failed to update comment: ' + (result.error?.message || 'Unknown error'));
        }
      } catch (err) {
        alert('Error: ' + err.message);
      }
    }

    // Delete comment (alias for consistency)
    window.deleteComment = (id) => updateComment(id, 'delete');

    // Filter comments
    window.filterComments = (status) => {
      currentFilter = status;
      
      // Update button states
      document.querySelectorAll('.filters button').forEach(btn => {
        btn.classList.remove('active');
      });
      event.target.classList.add('active');
      
      loadComments(status);
    };

    // Escape HTML
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Initial load
    window.updateComment = updateComment;
    loadStats();
    loadComments();
  </script>
</body>
</html>

