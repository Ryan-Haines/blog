---
interface Props {
  postSlug: string;
}

const { postSlug } = Astro.props;
---

<div class="engagement-bar flex items-center gap-6 py-4 border-y border-border my-8">
  <!-- Like Button -->
  <button
    id="like-button"
    data-post-slug={postSlug}
    class="group flex items-center gap-2 px-3 py-2 rounded-lg hover:bg-card-bg transition-all duration-200"
    aria-label="Like this post"
  >
    <svg
      class="heart-icon w-6 h-6 transition-all duration-200"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
      ></path>
    </svg>
    <span id="like-count" class="font-medium">0</span>
  </button>

  <!-- Parrot Container (between buttons) -->
  <div id="parrot-container" class="flex-shrink-0"></div>

  <!-- Comment Button -->
  <button
    id="comment-button"
    class="flex items-center gap-2 px-3 py-2 rounded-lg hover:bg-card-bg transition-all duration-200"
    aria-label="Jump to comments"
  >
    <svg
      class="w-6 h-6"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
      ></path>
    </svg>
    <span id="comment-count" class="font-medium">0</span>
  </button>
</div>

<script>
  import { actions } from 'astro:actions';

  const likeButton = document.getElementById('like-button') as HTMLButtonElement;
  const likeCount = document.getElementById('like-count');
  const heartIcon = document.querySelector('.heart-icon') as SVGElement;
  const commentButton = document.getElementById('comment-button') as HTMLButtonElement;
  const commentCount = document.getElementById('comment-count');

  if (likeButton && likeCount && heartIcon) {
    const postSlug = likeButton.dataset.postSlug;
    if (!postSlug) {
      console.error('No post slug found');
    } else {
      let userClaps = 0; // User's clap count (0-50)
      let isAnimating = false;
      let hasShownKeanu = false; // Track if we've shown Keanu at 50 claps

      // Load initial clap status
      async function loadLikes() {
        try {
          const result = await actions.getLikes({ postSlug: postSlug! });
          if (result.data && likeCount) {
            userClaps = result.data.userClaps || 0;
            likeCount.textContent = result.data.count.toString();
            updateHeartIcon();
            
            // If they already hit 50, mark Keanu as shown (don't show on page load)
            if (userClaps >= 50) {
              hasShownKeanu = true;
            }
          }
        } catch (error) {
          console.error('Error loading claps:', error);
          if (likeCount) likeCount.textContent = '0'; // Fallback to 0 instead of NaN
        }
      }

      // Add a clap (like Medium - up to 50 times!)
      async function toggleLike() {
        if (isAnimating) return;
        
        // Check if user hit max claps
        if (userClaps >= 50) {
          // Show Keanu ONCE, then silently ignore
          if (!hasShownKeanu) {
            hasShownKeanu = true;
            spawnParrot('keanu');
          }
          return; // Silently ignore further clicks
        }
        
        isAnimating = true;
        likeButton.disabled = true;

        // Optimistic update
        const currentCount = parseInt(likeCount?.textContent || '0') || 0;
        if (likeCount) {
          userClaps++;
          likeCount.textContent = (currentCount + 1).toString();
          updateHeartIcon();
        }

        // Animate heart + parrot easter egg
        heartIcon.style.animation = 'heartBeat 0.3s ease-in-out';
        setTimeout(() => {
          heartIcon.style.animation = '';
        }, 300);
        spawnParrot('love'); // ðŸ¦œ Love parrot!

        try {
          const result = await actions.toggleLike({ postSlug: postSlug! });
          
          if (result.data && likeCount) {
            // Update with actual counts from server
            userClaps = result.data.userClaps || 0;
            likeCount.textContent = result.data.totalClaps.toString();
            updateHeartIcon();
          } else if (result.error && likeCount) {
            const errorMsg = result.error.message || String(result.error);
            
            if (errorMsg.includes('Maximum claps')) {
              // They hit 50! Show Keanu ONCE
              userClaps = 50;
              if (!hasShownKeanu) {
                hasShownKeanu = true;
                spawnParrot('keanu');
              }
            } else {
              // Other errors: revert
              userClaps = Math.max(0, userClaps - 1);
              likeCount.textContent = currentCount.toString();
              updateHeartIcon();
              console.error('Error:', result.error);
            }
          }
        } catch (error) {
          console.error('Error adding clap:', error);
          // Revert on error
          if (likeCount) {
            userClaps = Math.max(0, userClaps - 1);
            likeCount.textContent = currentCount.toString();
            updateHeartIcon();
          }
        } finally {
          isAnimating = false;
          likeButton.disabled = false;
        }
      }

      // ðŸ¦œ Parrot easter egg!
      function spawnParrot(type: 'love' | 'keanu' = 'love') {
        const container = document.getElementById('parrot-container');
        if (!container) return;
        
        const parrot = document.createElement('img');
        parrot.className = 'parrot-animation';
        
        // Use local gifs (NO CDN = NO PROBLEMS)
        const isKeanu = type === 'keanu';
        const gifPath = isKeanu ? '/keanu_thanks.gif' : '/loveparrot.gif';
        parrot.alt = isKeanu ? 'Keanu says thanks!' : 'Love parrot';
        
        // Keanu plays once (1800ms) then freezes. Let it stay for a bit longer.
        const duration = isKeanu ? 1800 : 1500;
        
        // Set inline styles to ensure they work regardless of CSS scoping
        // Start with opacity 0 to prevent alt text flash!
        parrot.style.cssText = `
          width: 40px !important;
          height: 40px !important;
          object-fit: contain;
          display: block !important;
          position: absolute !important;
          left: 0;
          top: 0;
          pointer-events: none;
          opacity: 0;
          z-index: ${isKeanu ? 9999 : 1};
        `;
        
        // CRITICAL: Only show and animate AFTER the image has loaded (no alt text flash!)
        parrot.onload = () => {
          // Reset opacity so it becomes visible
          parrot.style.opacity = '1';
          container.appendChild(parrot);
          
          if (isKeanu) {
            // Keanu just appears and sits there - no animation
            setTimeout(() => {
              parrot.remove();
            }, duration);
          } else {
            // Parrot floats up with animation
            requestAnimationFrame(() => {
              requestAnimationFrame(() => {
                parrot.classList.add('float-up');
              });
            });
            
            setTimeout(() => {
              parrot.remove();
            }, duration);
          }
        };
        
        // Start loading the image (this triggers onload once ready)
        // Cache-bust for Keanu so it plays fresh every time (not frozen on last frame)
        parrot.src = isKeanu ? `${gifPath}?t=${Date.now()}` : gifPath;
      }

      function updateHeartIcon() {
        if (userClaps > 0) {
          heartIcon.style.fill = 'currentColor';
          heartIcon.style.color = '#ef4444'; // red-500
        } else {
          heartIcon.style.fill = 'none';
          heartIcon.style.color = '';
        }
      }

      // Event listeners
      likeButton.addEventListener('click', toggleLike);

      // Load initial state
      loadLikes();
    }
  }

  // Load comment count
  if (commentButton && commentCount) {
    const postSlug = likeButton?.dataset.postSlug;
    if (postSlug) {
      async function loadCommentCount() {
        try {
          const result = await actions.getComments({ postSlug: postSlug! });
          if (result.data && commentCount) {
            commentCount.textContent = result.data.count.toString();
          }
        } catch (error) {
          console.error('Error loading comment count:', error);
          if (commentCount) commentCount.textContent = '0'; // Fallback to 0 instead of NaN
        }
      }

      // Open comments sidebar on click
      commentButton.addEventListener('click', () => {
        window.dispatchEvent(new Event('open-comments-sidebar'));
      });
      
      // Listen for comments loaded event
      window.addEventListener('comments-loaded', (e: any) => {
        if (e.detail && commentCount) {
          commentCount.textContent = e.detail.count.toString();
        }
      });

      loadCommentCount();

      // Listen for new comments to update count
      window.addEventListener('comment-posted', () => {
        loadCommentCount();
      });
    }
  }
</script>

<style>
  @keyframes heartBeat {
    0% {
      transform: scale(1);
    }
    25% {
      transform: scale(1.3);
    }
    50% {
      transform: scale(1.1);
    }
    75% {
      transform: scale(1.2);
    }
    100% {
      transform: scale(1);
    }
  }

  /* ðŸ¦œ Parrot animations - MUST be global for dynamically created elements */
  :global(#parrot-container) {
    width: 40px;
    height: 40px;
    position: relative;
    overflow: visible;
    pointer-events: none;
  }

  :global(.parrot-animation) {
    width: 40px !important;
    height: 40px !important;
    object-fit: contain;
    display: block !important;
    position: absolute !important;
    left: 0;
    top: 0;
    pointer-events: none;
    will-change: transform, opacity;
  }

  @keyframes floatUp {
    from {
      transform: translateY(0px) scale(1);
      opacity: 1;
    }
    50% {
      opacity: 1;
    }
    to {
      transform: translateY(-40px) scale(0.7);
      opacity: 0;
    }
  }

  @keyframes floatDown {
    from {
      transform: translateY(0px) scale(1);
      opacity: 1;
    }
    50% {
      opacity: 1;
    }
    to {
      transform: translateY(40px) scale(0.7);
      opacity: 0;
    }
  }

  :global(.parrot-animation.float-up) {
    animation: floatUp 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards !important;
  }

  :global(.parrot-animation.float-down) {
    animation: floatDown 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards !important;
  }

  .engagement-bar button:hover .heart-icon {
    color: #ef4444;
  }

  .engagement-bar button:active {
    transform: scale(0.95);
  }
</style>

